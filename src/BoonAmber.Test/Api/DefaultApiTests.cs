/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using RestSharp;
using Xunit;

using BoonAmber.Client;
using BoonAmber.Api;
using BoonAmber.Model;

namespace BoonAmber.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;
        private string amber_license_file;
        private string amber_license_id;

        private void RestoreEnvironment()
        {
            //License File
            amber_license_file = Environment.GetEnvironmentVariable("AMBER_TEST_LICENSE_FILE");
            amber_license_id = Environment.GetEnvironmentVariable("AMBER_TEST_LICENSE_ID");

            //defaults
            if (string.IsNullOrEmpty(amber_license_file))
            {
                amber_license_file = "../test.Amber.license";
            }
            if (string.IsNullOrEmpty(amber_license_id))
            {
                amber_license_id = "default";
            }

            //clear env
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "");
        }

        public DefaultApiTests()
        {
            RestoreEnvironment();
            instance = new DefaultApi(amber_license_id, amber_license_file, false, 300000);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // test 'IsType' DefaultApi
            Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test authentication methods
        /// </summary>
        [Fact]
        public void AuthenticationTest()
        {
            // Test with the good instance
            var body = new PostAuth2Request(instance.username, instance.password);
            var response = instance.PostOauth2(body);

            // Check Token and Expiration
            Assert.False(string.IsNullOrEmpty(response.IdToken));
            Assert.False(string.IsNullOrEmpty(response.ExpiresIn));

            //Set the License Info with env
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "admin");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "admin");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "https://localhost:5007/v1");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "https://localhost:5007/v1");
            var instance1 = new DefaultApi("", "", false, 300000);
            Assert.Equal("admin", instance1.username);
            Assert.Equal("admin", instance1.password);
            Assert.Equal("https://localhost:5007/v1", instance1.server);
            Assert.Equal("https://localhost:5007/v1", instance1.oauth_server);
            Assert.Equal("https://localhost:5007/v1",instance1.GetBasePath());

            // Test With license file
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "");
            var instance2 = new DefaultApi(amber_license_id, amber_license_file, true, 300000);
            Assert.False(string.IsNullOrEmpty(instance2.username));
            Assert.False(string.IsNullOrEmpty(instance2.password));
            Assert.False(string.IsNullOrEmpty(instance2.server));
            Assert.False(string.IsNullOrEmpty(instance2.oauth_server));
            
            // test empty body fails
            try
            {
                instance.PostOauth2(null);
                Assert.True(false, "Authorization should have failed with empty oauth body");
            }
            catch (Exception)
            {
                // catches exception and passes test
            }
            
            // test home path garbage license file
            amber_license_file = "~/this-does-not-exist.json";
            try {
                var instance5 = new DefaultApi(amber_license_id, amber_license_file);
                Assert.True(false, "Authorization with bad file failed (aka it didn't throw an exception)");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "xyyyAmberUser");
            try {
                var instance5 = new DefaultApi(amber_license_id, amber_license_file);
                Assert.True(false, "Authorization with missing password failed (aka it didn't throw an exception)");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "bogus_password");
            try {
                var instance5 = new DefaultApi(amber_license_id, amber_license_file);
                Assert.True(false, "Authorization with missing server failed (aka it didn't throw an exception)");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }

            // override items in license file through environment
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "xyyyAmberUser");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "bogus_password");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "https://temp.amber.boonlogic.com/v1");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "https://auth.amber.boonlogic.com/v1");
            Environment.SetEnvironmentVariable("AMBER_SSL_VERIFY", "false");
            var instance3 = new DefaultApi(amber_license_id, amber_license_file, true, 300000);
            Assert.Equal("xyyyAmberUser", instance3.username);
            Assert.Equal("bogus_password", instance3.password);
            Assert.Equal("https://temp.amber.boonlogic.com/v1", instance3.server);
            Assert.Equal("https://auth.amber.boonlogic.com/v1", instance3.oauth_server);

            //test auth with garbage credentials
            var instance4 = new DefaultApi("garbage", amber_license_file, true, 300000);
            var body4 = new PostAuth2Request(instance4.username, instance4.password);
            try
            {
                instance4.PostOauth2(body4); // should except
                Assert.True(false, "Authorization with bad credentials should have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }
        }

        /// <summary>
        /// Test PostSensor and DeleteSensor
        /// </summary>
        [Fact]
        public void PostSensorTest()
        {
            //create sensor 
            var postSensorRequest = new PostSensorRequest("test_sensor_1");
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
            
        }

        /// <summary>
        /// Test PostSensor and DeleteSensor Negative
        /// </summary>
        [Fact]
        public void PostSensorTestNegative()
        {
            try
            {
                instance.PostSensor(null);
            }
            catch (Exception)
            {
                //test passed if empty post sensor throws an error
            }
            try
            {
                instance.DeleteSensor(null);
            }
            catch (Exception)
            {
                //test passed if empty delete sensor throws an error
            }
        }

        /// <summary>
        /// Test PutSensor
        /// </summary>
        [Fact]
        public void UpdateLabelTest()
        {
            //create sensor 
            var postSensorRequest = new PostSensorRequest("test_sensor_2");
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //update
            string newlabel = "test_sensor_2_updated";
            var putSensorRequest = new PutSensorRequest(newlabel);
            var put_response = instance.PutSensor(post_response.SensorId, putSensorRequest);
            Assert.IsType<PutSensorResponse>(put_response);
            Assert.False(string.IsNullOrEmpty(put_response.SensorId));
            Assert.Equal(newlabel, put_response.Label);

            //delete sensor
            var delete_response = instance.DeleteSensor(put_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PutSensor Negative
        /// </summary>
        [Fact]
        public void UpdateLabelTestNegative()
        {
            //update
            var putSensorRequest = new PutSensorRequest("test_sensor_garbage");
            try
            {
                var put_response = instance.PutSensor("nonexistent-sensor-id", putSensorRequest); // should throw
                Assert.True(false, "Update with bad sensor ID should have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }
             
             try {
                 instance.PutSensor(null, putSensorRequest); // should throw
                 Assert.True(false, "Update with null sensor ID should have raised exception");
             } catch (Exception) {
                 // Catches the assertion exception, and the test passes
             }
             
             try {
                 instance.PutSensor("nonexistent-sensor-id", null); // should throw
                 Assert.True(false, "Update with null putSensorRequest should have raised exception");
             } catch (Exception) {
                 // Catches the assertion exception, and the test passes
             }
        }

        /// <summary>
        /// Test GetSensor
        /// </summary>
        [Fact]
        public void GetSensorTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //get sensor 
            var get_response = instance.GetSensor(post_response.SensorId);
            Assert.IsType<GetSensorResponse>(get_response);
            Assert.False(string.IsNullOrEmpty(get_response.Label));
            Assert.Equal(label, get_response.Label);

            //delete sensor
            var delete_response = instance.DeleteSensor(get_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetSensor Negative
        /// </summary>
        [Fact]
        public void GetSensorTestNegative()
        {
            
            try {
                instance.GetSensor("nonexistent-sensor-id"); // should throw
                Assert.True(false, "GetSensor with bad sensor ID should have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }

            try {
                instance.GetSensor(null); // should throw
                Assert.True(false, "GetSensor with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
        }

        /// <summary>
        /// Test GetSensors
        /// </summary>
        [Fact]
        public void ListSensorTest()
        {
            //create sensors
            string[] labels = { "test_sensor_1", "test_sensor_2", "test_sensor_3" };
            foreach (string label in labels)
            {
                var postSensorRequest = new PostSensorRequest(label);
                var post_response = instance.PostSensor(postSensorRequest);
                Assert.IsType<PostSensorResponse>(post_response);
                Assert.False(string.IsNullOrEmpty(post_response.SensorId));
            }


            //get sensor 
            var get_response = instance.GetSensors();
            Assert.IsType<GetSensorsResponse>(get_response);
            Assert.True(get_response.Count >= 3, "Expected #sensors to be greater than or euqal to 3.");

            //delete sensor
            foreach (SensorInstance sensor in get_response)
            {
                var delete_response = instance.DeleteSensor(sensor.SensorId);
                Assert.IsType<Error>(delete_response);
            }
        }

        /// <summary>
        /// Test PostConfig and GetConfig
        /// </summary>
        [Fact]
        public void PostConfigTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with custom features
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //Post it
            var config_response = instance.PostConfig(post_response.SensorId, postConfigRequest);
            Assert.Equal(postConfigRequest.FeatureCount, config_response.FeatureCount);
            Assert.Equal(postConfigRequest.StreamingWindowSize, config_response.StreamingWindowSize);
            Assert.Equal(postConfigRequest.AnomalyHistoryWindow, config_response.AnomalyHistoryWindow);
            Assert.Equal(postConfigRequest.LearningRateNumerator, config_response.LearningRateNumerator);
            Assert.Equal(postConfigRequest.LearningRateDenominator, config_response.LearningRateDenominator);
            Assert.Equal(postConfigRequest.LearningMaxClusters, config_response.LearningMaxClusters);
            Assert.Equal(postConfigRequest.LearningMaxSamples, config_response.LearningMaxSamples);
            Assert.Equal(postConfigRequest.SamplesToBuffer, config_response.SamplesToBuffer);

            //Get the config
            var get_config_response = instance.GetConfig(post_response.SensorId);
            Assert.IsType<GetConfigResponse>(get_config_response);
            Assert.Equal(postConfigRequest.FeatureCount, get_config_response.FeatureCount);
            Assert.Equal(postConfigRequest.StreamingWindowSize, get_config_response.StreamingWindowSize);
            Assert.Equal(postConfigRequest.AnomalyHistoryWindow, get_config_response.AnomalyHistoryWindow);
            Assert.Equal(postConfigRequest.LearningRateNumerator, get_config_response.LearningRateNumerator);
            Assert.Equal(postConfigRequest.LearningRateDenominator, get_config_response.LearningRateDenominator);
            Assert.Equal(postConfigRequest.LearningMaxClusters, get_config_response.LearningMaxClusters);
            Assert.Equal(postConfigRequest.LearningMaxSamples, get_config_response.LearningMaxSamples);
            Assert.Equal(postConfigRequest.SamplesToBuffer, get_config_response.SamplesToBuffer);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PostConfig with invalid configuration
        /// </summary>
        [Fact]
        public void PostConfigTestNegative()
        {
            //create sensor 
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: -1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            try {
                instance.PostConfig(post_response.SensorId, postConfigRequest); // should throw
                Assert.True(false, "PostConfig with bad feature countshould have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }
            
            //configure without specifying sensor ID
            try {
                instance.PostConfig(null, postConfigRequest); // should throw
                Assert.True(false, "PostConfig with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
            //configure without specifying parameters
            try {
                instance.PostConfig(post_response.SensorId, null); // should throw
                Assert.True(false, "PostConfig with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetVersion
        /// </summary>
        [Fact]
        public void GetVersionTest()
        {
            // test get version
            var response = instance.GetVersion();
            Assert.IsType<ModelVersion>(response);
        }

        /// <summary>
        /// Test GetConfig Negative
        /// </summary>
        [Fact]
        public void GetConfigTestNegative()
        {
            
            try {
                instance.GetConfig("nonexistent-sensor-id"); // should throw
                Assert.True(false, "GetConfig with bad sensor ID should have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }

            try {
                instance.GetConfig(null); // should throw
                Assert.True(false, "GetConfig with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
        }


        /// <summary>
        /// Test PostStream 
        /// </summary>
        [Fact]
        public void PostStreamTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            var config_response = instance.PostConfig(post_response.SensorId, postConfigRequest);


            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var postStreamRequest = new PostStreamRequest(data: data_str);

            var post_stream_response = instance.PostStream(post_response.SensorId, postStreamRequest);
            Assert.IsType<PostStreamResponse>(post_stream_response);
            Assert.Equal(0, post_stream_response.RI[0]);
            Assert.Equal(0, post_stream_response.SI[0]);
            Assert.Equal(0, post_stream_response.AD[0]);
            Assert.Equal(0, post_stream_response.AH[0]);
            Assert.Equal(0, post_stream_response.AM[0]);
            Assert.Equal(0, post_stream_response.AW[0]);
            Assert.Equal(0, post_stream_response.ID[0]);
            Assert.False(string.IsNullOrEmpty(post_stream_response.State));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PostStream Negative
        /// </summary>
        [Fact]
        public void PostStreamTestNegative()
        {
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var postStreamRequest = new PostStreamRequest(data: data_str);

            try
            {
                var post_stream_response = instance.PostStream("nonexistent-sensor-id", postStreamRequest); // should throw
                Assert.True(false, "PostStream with bad sensor ID should have raised exception");
            }
            catch (Exception)
            {
                // Catches the assertion exception, and the test passes
            }
            
            try {
                instance.PostStream(null, postStreamRequest); // should throw
                Assert.True(false, "PostStream with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
            try {
                instance.PostStream("non-existant-sensor-id", null); // should throw
                Assert.True(false, "PostStream with null postStreamRequest should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }

        }
        
        /// <summary>
        /// Test GetSummary 
        /// </summary>
        [Fact]
        public void GetSummaryTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig>{ new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000, 
                                                    learningRateNumerator: 10, 
                                                    learningRateDenominator: 10000, 
                                                    learningMaxClusters: 1000, 
                                                    learningMaxSamples: 10000000, 
                                                    featureCount: 1, 
                                                    streamingWindowSize: 25,
                                                    features: features, 
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            var config_response = instance.PostConfig(post_response.SensorId, postConfigRequest);

            
            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var postStreamRequest = new PostStreamRequest(data: data_str);

            var post_stream_response = instance.PostStream(post_response.SensorId, postStreamRequest);
            Assert.IsType<PostStreamResponse>(post_stream_response);
            Assert.Equal(0, post_stream_response.RI[0]);
            Assert.Equal(0, post_stream_response.SI[0]);
            Assert.Equal(0, post_stream_response.AD[0]);
            Assert.Equal(0, post_stream_response.AH[0]);
            Assert.Equal(0, post_stream_response.AM[0]);
            Assert.Equal(0, post_stream_response.AW[0]);
            Assert.Equal(0, post_stream_response.ID[0]);
            Assert.False(string.IsNullOrEmpty(post_stream_response.State));

            var summary = instance.GetAmberSummary(post_response.SensorId);
            Assert.False(string.IsNullOrEmpty(summary.MAmberStatus.MStatus));
   
            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetSummary negative
        /// </summary>
        [Fact]
        public void GetSummaryNegative()
        {
            try
            {
                instance.GetAmberSummary(null);
                Assert.True(false, "GetSummary falsely accepts a null sensorID");
            }
            catch (Exception)
            {
                //test passes because get summary fails without sensorID
            }
        }
        
        //TODO: pretrain
        
        // /// <summary>
        // /// Test PutConfig
        // /// </summary>
        // [Fact]
        // public void PutConfigTest()
        // {
        //     //create sensor 
        //     string label = "test_sensor_1";
        //     var postSensorRequest = new PostSensorRequest(label);
        //     var post_response = instance.PostSensor(postSensorRequest);
        //     Assert.IsType<PostSensorResponse>(post_response);
        //     Assert.False(string.IsNullOrEmpty(post_response.SensorId));
        //
        //     // configure sensor with custom features
        //     List<FeatureConfig> features = new List<FeatureConfig>{ new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };
        //
        //     var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000, 
        //                                             learningRateNumerator: 10, 
        //                                             learningRateDenominator: 10000, 
        //                                             learningMaxClusters: 1000, 
        //                                             learningMaxSamples: 10000000, 
        //                                             featureCount: 1, 
        //                                             streamingWindowSize: 1,
        //                                             features: features, 
        //                                             samplesToBuffer: 10
        //                                         );
        //
        //     //Post it
        //     var config_response = instance.PostConfig(post_response.SensorId, postConfigRequest);
        //     
        //     //stream data
        //     float[] data =
        //     {
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f,
        //         1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f
        //     };
        //     var data_str = instance.FormatData(data);
        //     var postPretrainRequest = new PostPretrainRequest(data: data_str);
        //
        //     var post_pretrain_response = instance.PostPretrain(post_response.SensorId, postPretrainRequest);
        //
        //     // add on configuration fusion and streaming 
        //     List<FusionConfig> fusion_features = new List<FusionConfig>{ new FusionConfig( "fancy-label", FusionConfig.SubmitRuleEnum.Submit) };
        //     StreamingParameters streaming = new StreamingParameters(10000, 10,10000,1000,10000000);
        //
        //     var putConfigRequest = new PutConfigRequest(features: fusion_features, streaming: streaming);
        //     var put_config_response = instance.PutConfig(post_response.SensorId, putConfigRequest);
        //     Assert.IsType<PutConfigResponse>(put_config_response);
        //     
        //     //delete sensor
        //     var delete_response = instance.DeleteSensor(post_response.SensorId);
        //     Assert.IsType<Error>(delete_response);
        // }

        /// <summary>
        /// Test Put Config negative
        /// </summary>
        public void PutConfigTestNegative()
        {
            List<FusionConfig> fusion_features = new List<FusionConfig>{ new FusionConfig( "fancy-label", FusionConfig.SubmitRuleEnum.Submit) };
            StreamingParameters streaming = new StreamingParameters(10000, 10,10000,1000,10000000);

            var putConfigRequest = new PutConfigRequest(features: fusion_features, streaming: streaming);

            //configure without specifying sensor ID
            try {
                instance.PutConfig(null, putConfigRequest); // should throw
                Assert.True(false, "PutConfig with null sensor ID should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
            //configure without specifying parameters
            try {
                instance.PutConfig("non-existant-sensor-id", null); // should throw
                Assert.True(false, "PutConfig with null putconfigrequest should have raised exception");
            } catch (Exception) {
                // Catches the assertion exception, and the test passes
            }
            
            string label = "test_sensor_1";
            var postSensorRequest = new PostSensorRequest(label);
            var post_response = instance.PostSensor(postSensorRequest);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with custom features
            List<FeatureConfig> features = new List<FeatureConfig>{ new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };

            var postConfigRequest = new PostConfigRequest(anomalyHistoryWindow: 1000, 
                learningRateNumerator: 10, 
                learningRateDenominator: 10000, 
                learningMaxClusters: 1000, 
                learningMaxSamples: 10000000, 
                featureCount: 1, 
                streamingWindowSize: 25,
                features: features, 
                samplesToBuffer: 1000
            );

            //Post it
            var config_response = instance.PostConfig(post_response.SensorId, postConfigRequest);
            
            streaming = new StreamingParameters(10000, 10,10000,1000,10000000);

            putConfigRequest = new PutConfigRequest(features: fusion_features, streaming: streaming);
            try
            {
                var put_config_response = instance.PutConfig(post_response.SensorId, putConfigRequest);
                Assert.True(false, "PutConfig failed because put streaming in buffering mode should throw an error");
            }
            catch (Exception)
            {
                // caught exception and test passes
            }
            
            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }
        
        //TODO: rootcause
        
        //TODO: get status
        
        //TODO: post outage
        
        //TODO: putstream

    }

}
