/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp.Portable;
using NUnit.Framework;

using BoonAmber.Client;
using BoonAmber.Api;
using BoonAmber.Model;

namespace BoonAmber.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test DeleteSensor
        /// </summary>
        [Test]
        public void DeleteSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.DeleteSensor(sensorId);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        /// <summary>
        /// Test GetAmberSummary
        /// </summary>
        [Test]
        public void GetAmberSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.GetAmberSummary(sensorId);
            //Assert.IsInstanceOf<GetSummaryResponse> (response, "response is GetSummaryResponse");
        }
        /// <summary>
        /// Test GetConfig
        /// </summary>
        [Test]
        public void GetConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.GetConfig(sensorId);
            //Assert.IsInstanceOf<GetConfigResponse> (response, "response is GetConfigResponse");
        }
        /// <summary>
        /// Test GetPretrain
        /// </summary>
        [Test]
        public void GetPretrainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.GetPretrain(sensorId);
            //Assert.IsInstanceOf<GetPretrainResponse> (response, "response is GetPretrainResponse");
        }
        /// <summary>
        /// Test GetRootCause
        /// </summary>
        [Test]
        public void GetRootCauseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //string clusterID = null;
            //string pattern = null;
            //var response = instance.GetRootCause(sensorId, clusterID, pattern);
            //Assert.IsInstanceOf<GetRootCauseResponse> (response, "response is GetRootCauseResponse");
        }
        /// <summary>
        /// Test GetSensor
        /// </summary>
        [Test]
        public void GetSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.GetSensor(sensorId);
            //Assert.IsInstanceOf<GetSensorResponse> (response, "response is GetSensorResponse");
        }
        /// <summary>
        /// Test GetSensors
        /// </summary>
        [Test]
        public void GetSensorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSensors();
            //Assert.IsInstanceOf<GetSensorsResponse> (response, "response is GetSensorsResponse");
        }
        /// <summary>
        /// Test GetStatus
        /// </summary>
        [Test]
        public void GetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.GetStatus(sensorId);
            //Assert.IsInstanceOf<GetStatusResponse> (response, "response is GetStatusResponse");
        }
        /// <summary>
        /// Test GetVersion
        /// </summary>
        [Test]
        public void GetVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetVersion();
            //Assert.IsInstanceOf<Version> (response, "response is Version");
        }
        /// <summary>
        /// Test PostConfig
        /// </summary>
        [Test]
        public void PostConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostConfigRequest body = null;
            //string sensorId = null;
            //var response = instance.PostConfig(body, sensorId);
            //Assert.IsInstanceOf<PostConfigResponse> (response, "response is PostConfigResponse");
        }
        /// <summary>
        /// Test PostOauth2
        /// </summary>
        [Test]
        public void PostOauth2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostAuth2Request body = null;
            //var response = instance.PostOauth2(body);
            //Assert.IsInstanceOf<PostAuth2Response> (response, "response is PostAuth2Response");
        }
        /// <summary>
        /// Test PostOutage
        /// </summary>
        [Test]
        public void PostOutageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorId = null;
            //var response = instance.PostOutage(sensorId);
            //Assert.IsInstanceOf<PostOutageResponse> (response, "response is PostOutageResponse");
        }
        /// <summary>
        /// Test PostPretrain
        /// </summary>
        [Test]
        public void PostPretrainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostPretrainRequest body = null;
            //string sensorId = null;
            //string amberChunk = null;
            //string amberTransaction = null;
            //var response = instance.PostPretrain(body, sensorId, amberChunk, amberTransaction);
            //Assert.IsInstanceOf<PostPretrainResponse> (response, "response is PostPretrainResponse");
        }
        /// <summary>
        /// Test PostSensor
        /// </summary>
        [Test]
        public void PostSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostSensorRequest body = null;
            //var response = instance.PostSensor(body);
            //Assert.IsInstanceOf<PostSensorResponse> (response, "response is PostSensorResponse");
        }
        /// <summary>
        /// Test PostStream
        /// </summary>
        [Test]
        public void PostStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostStreamRequest body = null;
            //string sensorId = null;
            //var response = instance.PostStream(body, sensorId);
            //Assert.IsInstanceOf<PostStreamResponse> (response, "response is PostStreamResponse");
        }
        /// <summary>
        /// Test PutConfig
        /// </summary>
        [Test]
        public void PutConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PutConfigRequest body = null;
            //string sensorId = null;
            //var response = instance.PutConfig(body, sensorId);
            //Assert.IsInstanceOf<PutConfigResponse> (response, "response is PutConfigResponse");
        }
        /// <summary>
        /// Test PutSensor
        /// </summary>
        [Test]
        public void PutSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PutSensorRequest body = null;
            //string sensorId = null;
            //var response = instance.PutSensor(body, sensorId);
            //Assert.IsInstanceOf<PutSensorResponse> (response, "response is PutSensorResponse");
        }
        /// <summary>
        /// Test PutStream
        /// </summary>
        [Test]
        public void PutStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PutStreamRequest body = null;
            //string sensorId = null;
            //var response = instance.PutStream(body, sensorId);
            //Assert.IsInstanceOf<PutStreamResponse> (response, "response is PutStreamResponse");
        }
    }

}
