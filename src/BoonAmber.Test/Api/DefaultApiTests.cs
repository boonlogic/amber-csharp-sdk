/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using Xunit;

using BoonAmber.Client;
using BoonAmber.Api;
using BoonAmber.Model;
// ReSharper disable AssignNullToNotNullAttribute

namespace BoonAmber.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;
        private string amber_license_file;
        private string amber_license_id;

        private void RestoreEnvironment()
        {
            //License File
            amber_license_file = Environment.GetEnvironmentVariable("AMBER_TEST_LICENSE_FILE");
            amber_license_id = Environment.GetEnvironmentVariable("AMBER_TEST_LICENSE_ID");

            //defaults
            if (string.IsNullOrEmpty(amber_license_file))
            {
                amber_license_file = "../test.Amber.license";
            }
            if (string.IsNullOrEmpty(amber_license_id))
            {
                amber_license_id = "default";
            }

            //clear env
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "");
        }

        public DefaultApiTests()
        {
            RestoreEnvironment();
            instance = new DefaultApi(amber_license_id, amber_license_file, false);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // test 'IsType' DefaultApi
            Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test authentication methods
        /// </summary>
        [Fact]
        public void AuthenticationTest()
        {
            // Test with the good instance
            var body = new PostAuth2Request(instance.username, instance.password);
            var response = instance.PostOauth2(body);

            // Check Token and Expiration
            Assert.False(string.IsNullOrEmpty(response.IdToken));
            Assert.False(string.IsNullOrEmpty(response.ExpiresIn));

            //Set the License Info with env
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "admin");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "admin");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "https://localhost:5007/v1");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "https://localhost:5007/v1");
            var instance1 = new DefaultApi("", "", false);
            Assert.Equal("admin", instance1.username);
            Assert.Equal("admin", instance1.password);
            Assert.Equal("https://localhost:5007/v1", instance1.server);
            Assert.Equal("https://localhost:5007/v1", instance1.oauth_server);
            Assert.Equal("https://localhost:5007/v1", instance1.GetBasePath());

            // Test With license file
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "");
            var instance2 = new DefaultApi(amber_license_id, amber_license_file);
            Assert.False(string.IsNullOrEmpty(instance2.username));
            Assert.False(string.IsNullOrEmpty(instance2.password));
            Assert.False(string.IsNullOrEmpty(instance2.server));
            Assert.False(string.IsNullOrEmpty(instance2.oauth_server));

            // test empty body fails
            Assert.Throws<ApiException>(() => instance.PostOauth2(null));

            // test home path garbage license file
            amber_license_file = "~/this-does-not-exist.json";
            Assert.Throws<InvalidOperationException>(() => new DefaultApi(amber_license_id, amber_license_file));

            // test with missing password
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "xyyyAmberUser");
            Assert.Throws<InvalidOperationException>(() => new DefaultApi(amber_license_id, amber_license_file));

            // test test with missing server
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "bogus_password");
            Assert.Throws<InvalidOperationException>(() => new DefaultApi(amber_license_id, amber_license_file));

            // override items in license file through environment
            Environment.SetEnvironmentVariable("AMBER_USERNAME", "xyyyAmberUser");
            Environment.SetEnvironmentVariable("AMBER_PASSWORD", "bogus_password");
            Environment.SetEnvironmentVariable("AMBER_SERVER", "https://temp.amber.boonlogic.com/v1");
            Environment.SetEnvironmentVariable("AMBER_OAUTH_SERVER", "https://auth.amber.boonlogic.com/v1");
            Environment.SetEnvironmentVariable("AMBER_SSL_VERIFY", "false");
            var instance3 = new DefaultApi(amber_license_id, amber_license_file);
            Assert.Equal("xyyyAmberUser", instance3.username);
            Assert.Equal("bogus_password", instance3.password);
            Assert.Equal("https://temp.amber.boonlogic.com/v1", instance3.server);
            Assert.Equal("https://auth.amber.boonlogic.com/v1", instance3.oauth_server);

            //test auth with garbage credentials
            var instance4 = new DefaultApi("garbage", amber_license_file);
            var body4 = new PostAuth2Request(instance4.username, instance4.password);
            Assert.Throws<ApiException>(() => instance4.PostOauth2(body4));

        }

        /// <summary>
        /// Test PostSensor and DeleteSensor
        /// </summary>
        [Fact]
        public void PostSensorTest()
        {
            //create sensor 
            var post_sensor_request = new PostSensorRequest("test_sensor_1");
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);

        }

        /// <summary>
        /// Test PostSensor and DeleteSensor Negative
        /// </summary>
        [Fact]
        public void PostSensorTestNegative()
        {
            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PostSensor(null));

            Assert.Throws<ApiException>(() => instance.DeleteSensor(null));

        }

        /// <summary>
        /// Test PutSensor
        /// </summary>
        [Fact]
        public void UpdateLabelTest()
        {
            //create sensor 
            var post_sensor_request = new PostSensorRequest("test_sensor_2");
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //update
            string newlabel = "test_sensor_2_updated";
            var put_sensor_request = new PutSensorRequest(newlabel);
            var put_response = instance.PutSensor(post_response.SensorId, put_sensor_request);
            Assert.IsType<PutSensorResponse>(put_response);
            Assert.False(string.IsNullOrEmpty(put_response.SensorId));
            Assert.Equal(newlabel, put_response.Label);

            //delete sensor
            var delete_response = instance.DeleteSensor(put_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PutSensor Negative
        /// </summary>
        [Fact]
        public void UpdateLabelTestNegative()
        {
            //update
            var put_sensor_request = new PutSensorRequest("test_sensor_garbage");

            // test invalid sensor ID
            Assert.Throws<ApiException>(() => instance.PutSensor("nonexistent-sensor-id", put_sensor_request));

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PutSensor(null, put_sensor_request));

            // test null putSensorRequest
            Assert.Throws<ApiException>(() => instance.PutSensor("nonexistent-sensor-id", null));
        }

        /// <summary>
        /// Test GetSensor
        /// </summary>
        [Fact]
        public void GetSensorTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            //get sensor 
            var get_response = instance.GetSensor(post_response.SensorId);
            Assert.IsType<GetSensorResponse>(get_response);
            Assert.False(string.IsNullOrEmpty(get_response.Label));
            Assert.Equal(label, get_response.Label);

            //delete sensor
            var delete_response = instance.DeleteSensor(get_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetSensor Negative
        /// </summary>
        [Fact]
        public void GetSensorTestNegative()
        {
            // test invalid sensor ID
            Assert.Throws<ApiException>(() => instance.GetSensor("nonexistent-sensor-id"));

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.GetSensor(null));

        }

        /// <summary>
        /// Test GetSensors
        /// </summary>
        [Fact]
        public void ListSensorTest()
        {
            //create sensors
            string[] labels = { "test_sensor_1", "test_sensor_2", "test_sensor_3" };
            foreach (string label in labels)
            {
                var post_sensor_request = new PostSensorRequest(label);
                var post_response = instance.PostSensor(post_sensor_request);
                Assert.IsType<PostSensorResponse>(post_response);
                Assert.False(string.IsNullOrEmpty(post_response.SensorId));
            }


            //get sensor 
            var get_response = instance.GetSensors();
            Assert.IsType<GetSensorsResponse>(get_response);
            Assert.True(get_response.Count >= 3, "Expected #sensors to be greater than or euqal to 3.");

            //delete sensor
            foreach (SensorInstance sensor in get_response)
            {
                var delete_response = instance.DeleteSensor(sensor.SensorId);
                Assert.IsType<Error>(delete_response);
            }
        }

        /// <summary>
        /// Test PostConfig and GetConfig
        /// </summary>
        [Fact]
        public void PostConfigTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with custom features
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //Post it
            var config_response = instance.PostConfig(post_response.SensorId, post_config_request);
            Assert.Equal(post_config_request.FeatureCount, config_response.FeatureCount);
            Assert.Equal(post_config_request.StreamingWindowSize, config_response.StreamingWindowSize);
            Assert.Equal(post_config_request.AnomalyHistoryWindow, config_response.AnomalyHistoryWindow);
            Assert.Equal(post_config_request.LearningRateNumerator, config_response.LearningRateNumerator);
            Assert.Equal(post_config_request.LearningRateDenominator, config_response.LearningRateDenominator);
            Assert.Equal(post_config_request.LearningMaxClusters, config_response.LearningMaxClusters);
            Assert.Equal(post_config_request.LearningMaxSamples, config_response.LearningMaxSamples);
            Assert.Equal(post_config_request.SamplesToBuffer, config_response.SamplesToBuffer);

            //Get the config
            var get_config_response = instance.GetConfig(post_response.SensorId);
            Assert.IsType<GetConfigResponse>(get_config_response);
            Assert.Equal(post_config_request.FeatureCount, get_config_response.FeatureCount);
            Assert.Equal(post_config_request.StreamingWindowSize, get_config_response.StreamingWindowSize);
            Assert.Equal(post_config_request.AnomalyHistoryWindow, get_config_response.AnomalyHistoryWindow);
            Assert.Equal(post_config_request.LearningRateNumerator, get_config_response.LearningRateNumerator);
            Assert.Equal(post_config_request.LearningRateDenominator, get_config_response.LearningRateDenominator);
            Assert.Equal(post_config_request.LearningMaxClusters, get_config_response.LearningMaxClusters);
            Assert.Equal(post_config_request.LearningMaxSamples, get_config_response.LearningMaxSamples);
            Assert.Equal(post_config_request.SamplesToBuffer, get_config_response.SamplesToBuffer);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PostConfig with invalid configuration
        /// </summary>
        [Fact]
        public void PostConfigTestNegative()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: -1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );
            //test bad feature count
            Assert.Throws<ApiException>(() => instance.PostConfig(post_response.SensorId, post_config_request));

            //configure without specifying sensor ID
            Assert.Throws<ApiException>(() => instance.PostConfig(null, post_config_request));

            //configure without specifying parameters
            Assert.Throws<ApiException>(() => instance.PostConfig(post_response.SensorId, null));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetVersion
        /// </summary>
        [Fact]
        public void GetVersionTest()
        {
            // test get version
            var response = instance.GetVersion();
            Assert.IsType<ModelVersion>(response);
        }

        /// <summary>
        /// Test GetConfig Negative
        /// </summary>
        [Fact]
        public void GetConfigTestNegative()
        {
            // test invlaid sensor ID
            Assert.Throws<ApiException>(() => instance.GetConfig("nonexistent-sensor-id"));

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.GetConfig(null));

        }


        /// <summary>
        /// Test PostStream 
        /// </summary>
        [Fact]
        public void PostStreamTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var post_stream_request = new PostStreamRequest(data: data_str);

            var post_stream_response = instance.PostStream(post_response.SensorId, post_stream_request);
            Assert.IsType<PostStreamResponse>(post_stream_response);
            Assert.Equal(0, post_stream_response.RI[0]);
            Assert.Equal(0, post_stream_response.SI[0]);
            Assert.Equal(0, post_stream_response.AD[0]);
            Assert.Equal(0, post_stream_response.AH[0]);
            Assert.Equal(0, post_stream_response.AM[0]);
            Assert.Equal(0, post_stream_response.AW[0]);
            Assert.Equal(0, post_stream_response.ID[0]);
            Assert.False(string.IsNullOrEmpty(post_stream_response.State));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test PostStream Negative
        /// </summary>
        [Fact]
        public void PostStreamTestNegative()
        {
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var post_stream_request = new PostStreamRequest(data: data_str);

            // test bad sensor ID
            Assert.Throws<ApiException>(() => instance.PostStream("nonexistent-sensor-id", post_stream_request));

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PostStream(null, post_stream_request));

            // test null postStreamRequest
            Assert.Throws<ApiException>(() => instance.PostStream("non-existant-sensor-id", null));

        }

        /// <summary>
        /// Test GetSummary 
        /// </summary>
        [Fact]
        public void GetSummaryTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);


            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var post_stream_request = new PostStreamRequest(data: data_str);

            var post_stream_response = instance.PostStream(post_response.SensorId, post_stream_request);
            Assert.IsType<PostStreamResponse>(post_stream_response);
            Assert.Equal(0, post_stream_response.RI[0]);
            Assert.Equal(0, post_stream_response.SI[0]);
            Assert.Equal(0, post_stream_response.AD[0]);
            Assert.Equal(0, post_stream_response.AH[0]);
            Assert.Equal(0, post_stream_response.AM[0]);
            Assert.Equal(0, post_stream_response.AW[0]);
            Assert.Equal(0, post_stream_response.ID[0]);
            Assert.False(string.IsNullOrEmpty(post_stream_response.State));

            var summary = instance.GetAmberSummary(post_response.SensorId);
            Assert.False(string.IsNullOrEmpty(summary.MAmberStatus.MStatus));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetSummary negative
        /// </summary>
        [Fact]
        public void GetSummaryTestNegative()
        {
            // test null sesnor ID
            Assert.Throws<ApiException>(() => instance.GetAmberSummary(null));
        }

        /// <summary>
        /// Test Pretrain
        /// </summary>
        [Fact]
        public void PostPretrainTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = Enumerable.Repeat(new FeatureConfig(50, 1, 1, submitRule: FeatureConfig.SubmitRuleEnum.Submit),
                                         201).ToList();

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                learningRateNumerator: 10,
                learningRateDenominator: 10000,
                learningMaxClusters: 1000,
                learningMaxSamples: 10000000,
                featureCount: 201,
                streamingWindowSize: 25,
                features: features,
                samplesToBuffer: 1000
            );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            // read data file
            var file_path = "../../../data.csv";
            StreamReader reader = new StreamReader(file_path);
            List<string> data = new List<string>();
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                data.Add(line);
            }

            var data_str = String.Join(",", data);
            var post_pretrain_request = new PostPretrainRequest(data: data_str);
            var post_pretrain_response = instance.PostPretrain(post_response.SensorId, post_pretrain_request);

            Assert.Equal("Pretrained", post_pretrain_response.State);
        }

        /// <summary>
        /// Test Pretrain negative
        /// </summary>
        [Fact]
        public void PostPretrainTestNegative()
        {
            float[] data =
            {
                1f, 2f, 3f, 4f, 5f
            };
            var data_str = String.Join(",", data);
            var post_pretrain_request = new PostPretrainRequest(data: data_str);

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PostPretrain(null, post_pretrain_request));

            // test null postPretrainRequest
            Assert.Throws<ApiException>(() => instance.PostPretrain("non-existent", null));

        }

        /// <summary>
        /// Test PutConfig
        /// </summary>
        [Fact]
        public void PutConfigTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with invalid feature count
            List<FeatureConfig> features = Enumerable.Repeat(new FeatureConfig(50, 1, 1, submitRule: FeatureConfig.SubmitRuleEnum.Submit),
                201).ToList();

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                learningRateNumerator: 10,
                learningRateDenominator: 10000,
                learningMaxClusters: 1000,
                learningMaxSamples: 10000000,
                featureCount: 201,
                streamingWindowSize: 25,
                features: features,
                samplesToBuffer: 1000
            );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            // read data file
            var file_path = "../../../data.csv";
            StreamReader reader = new StreamReader(file_path);
            List<string> data = new List<string>();
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                data.Add(line);
            }

            var data_str = String.Join(",", data);
            var post_pretrain_request = new PostPretrainRequest(data: data_str);
            var post_pretrain_response = instance.PostPretrain(post_response.SensorId, post_pretrain_request);

            Assert.Equal("Pretrained", post_pretrain_response.State);

            // add on configuration fusion and streaming 
            List<FusionConfig> fusion_features = new List<FusionConfig>();
            for (int i = 0; i < 201; i++)
            {
                fusion_features.Add(new FusionConfig("fancy-label-" + i.ToString(), FusionConfig.SubmitRuleEnum.Submit));
            }
            StreamingParameters streaming = new StreamingParameters(10000, 10, 10000, 1000, 10000000);

            var put_config_request = new PutConfigRequest(features: fusion_features, streaming: streaming);
            var put_config_response = instance.PutConfig(post_response.SensorId, put_config_request);
            Assert.IsType<PutConfigResponse>(put_config_response);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test Put Config negative
        /// </summary>
        [Fact]
        public void PutConfigTestNegative()
        {
            List<FusionConfig> fusion_features = new List<FusionConfig> { new FusionConfig("fancy-label", FusionConfig.SubmitRuleEnum.Submit) };
            StreamingParameters streaming = new StreamingParameters(10000, 10, 10000, 1000, 10000000);

            var put_config_request = new PutConfigRequest(features: fusion_features, streaming: streaming);

            //configure without specifying sensor ID
            Assert.Throws<ApiException>(() => instance.PutConfig(null, put_config_request));

            //configure without specifying parameters
            Assert.Throws<ApiException>(() => instance.PutConfig("non-existant-sensor-id", null));

            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with custom features
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                learningRateNumerator: 10,
                learningRateDenominator: 10000,
                learningMaxClusters: 1000,
                learningMaxSamples: 10000000,
                featureCount: 1,
                streamingWindowSize: 25,
                features: features,
                samplesToBuffer: 1000
            );

            //Post it
            instance.PostConfig(post_response.SensorId, post_config_request);

            streaming = new StreamingParameters(10000, 10, 10000, 1000, 10000000);

            put_config_request = new PutConfigRequest(features: fusion_features, streaming: streaming);
            // test enable learning fails while in buffering
            Assert.Throws<ApiException>(() => instance.PutConfig(post_response.SensorId, put_config_request));

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test GetRootCause
        /// </summary>
        [Fact]
        public void GetRootCauseTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with invalid feature count
            List<FeatureConfig> features = Enumerable.Repeat(new FeatureConfig(50, 1, 1, submitRule: FeatureConfig.SubmitRuleEnum.Submit),
                201).ToList();

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                learningRateNumerator: 10,
                learningRateDenominator: 10000,
                learningMaxClusters: 1000,
                learningMaxSamples: 10000000,
                featureCount: 201,
                streamingWindowSize: 25,
                features: features,
                samplesToBuffer: 1000
            );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            // read data file
            var file_path = "../../../data.csv";
            StreamReader reader = new StreamReader(file_path);
            List<string> data = new List<string>();
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                data.Add(line);
            }

            var data_str = String.Join(",", data);
            var post_pretrain_request = new PostPretrainRequest(data: data_str);
            var post_pretrain_response = instance.PostPretrain(post_response.SensorId, post_pretrain_request);

            Assert.Equal("Pretrained", post_pretrain_response.State);

            var get_root_cause_response = instance.GetRootCause(post_response.SensorId, "[1]");
            Assert.IsType<GetRootCauseResponse>(get_root_cause_response);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test root cause negative
        /// </summary>
        [Fact]
        public void GetRootCauseTestNegative()
        {
            Assert.Throws<ApiException>(() => instance.GetRootCause(null));
        }

        /// <summary>
        /// Test Get Status 
        /// </summary>
        [Fact]
        public void GetStatusTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };


            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var post_stream_request = new PostStreamRequest(data: data_str);

            instance.PostStream(post_response.SensorId, post_stream_request);

            var get_status_response = instance.GetStatus(post_response.SensorId);
            Assert.IsType<GetStatusResponse>(get_status_response);
            Assert.Equal("Buffering", get_status_response.State);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test Get status negative
        /// </summary>
        [Fact]
        public void GetStatusTestNegative()
        {
            Assert.Throws<ApiException>(() => instance.GetRootCause(null, "1"));
        }

        //TODO: post outage

        /// <summary>
        /// Test Post Outage 
        /// </summary>
        [Fact]
        public void PostOutageTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig> { new FeatureConfig(50, 1, 1, "fancy-label", FeatureConfig.SubmitRuleEnum.Submit) };

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                                                    learningRateNumerator: 10,
                                                    learningRateDenominator: 10000,
                                                    learningMaxClusters: 1000,
                                                    learningMaxSamples: 10000000,
                                                    featureCount: 1,
                                                    streamingWindowSize: 25,
                                                    features: features,
                                                    samplesToBuffer: 1000
                                                );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            //stream data
            float[] data = { 1.0f, 2.0f, 3.0f, 4.0f };
            var data_str = instance.FormatData(data);
            var post_stream_request = new PostStreamRequest(data: data_str);

            instance.PostStream(post_response.SensorId, post_stream_request);

            var post_outage_response = instance.PostOutage(post_response.SensorId);
            Assert.IsType<PostOutageResponse>(post_outage_response);
            Assert.Equal("Buffering", post_outage_response.State);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test Post Outage Negative
        /// </summary>
        [Fact]
        public void PostOutageTestNegative()
        {
            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PostOutage(null));
        }

        //TODO: putstream

        /// <summary>
        /// Test PutStream
        /// </summary>
        [Fact]
        public void PutStreamTest()
        {
            //create sensor 
            string label = "test_sensor_1";
            var post_sensor_request = new PostSensorRequest(label);
            var post_response = instance.PostSensor(post_sensor_request);
            Assert.IsType<PostSensorResponse>(post_response);
            Assert.False(string.IsNullOrEmpty(post_response.SensorId));

            // configure sensor with invalid feature count
            List<FeatureConfig> features = new List<FeatureConfig>
                { new FeatureConfig(50, 1, 1, "fancy-label-0", submitRule: FeatureConfig.SubmitRuleEnum.Submit) };

            var post_config_request = new PostConfigRequest(anomalyHistoryWindow: 1000,
                learningRateNumerator: 10,
                learningRateDenominator: 10000,
                learningMaxClusters: 1000,
                learningMaxSamples: 10000000,
                featureCount: 1,
                streamingWindowSize: 25,
                features: features,
                samplesToBuffer: 1000
            );

            //post a configuration
            instance.PostConfig(post_response.SensorId, post_config_request);

            // read data file
            var file_path = "../../../data.csv";
            StreamReader reader = new StreamReader(file_path);
            var line = reader.ReadLine();
            var data = line.Split(",");
            List<PutStreamFeature> put_stream_features = new List<PutStreamFeature> { new PutStreamFeature("fancy-label-0", Convert.ToSingle(data[0])) };

            var put_stream_request = new PutStreamRequest(put_stream_features, PutStreamRequest.SubmitRuleEnum.Submit);
            var put_stream_response = instance.PutStream(post_response.SensorId, put_stream_request);
            Assert.IsType<PutStreamResponse>(put_stream_response);

            //delete sensor
            var delete_response = instance.DeleteSensor(post_response.SensorId);
            Assert.IsType<Error>(delete_response);
        }

        /// <summary>
        /// Test Put stream negative
        /// </summary>
        [Fact]
        public void PutStreamTestNegative()
        {
            // test null vector value
            Assert.Throws<ArgumentNullException>(() => new PutStreamRequest(null, PutStreamRequest.SubmitRuleEnum.Submit));

            // read data file
            var file_path = "../../../data.csv";
            StreamReader reader = new StreamReader(file_path);
            var line = reader.ReadLine();
            var data = line.Split(",");
            List<PutStreamFeature> put_stream_features = new List<PutStreamFeature>();
            for (int i = 0; i < 201; i++)
            {
                put_stream_features.Add(new PutStreamFeature("fancy-label-" + i, Convert.ToSingle(data[i])));
            }
            var put_stream_request = new PutStreamRequest(put_stream_features, PutStreamRequest.SubmitRuleEnum.Submit);

            // test null sensor ID
            Assert.Throws<ApiException>(() => instance.PutStream(null, put_stream_request));

            //test null putStreamRequest
            Assert.Throws<ApiException>(() => instance.PutStream("non-existent", null));
        }

    }

}
