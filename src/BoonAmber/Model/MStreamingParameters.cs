/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MStreamingParameters
    /// </summary>
    [DataContract]
        public partial class MStreamingParameters :  IEquatable<MStreamingParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MStreamingParameters" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mEnableAutotuning">mEnableAutotuning.</param>
        /// <param name="mSamplesToBufferForAutotuning">mSamplesToBufferForAutotuning (required).</param>
        /// <param name="mGraduationAtRateNumerator">mGraduationAtRateNumerator (required).</param>
        /// <param name="mGraduationAtRateDenominator">mGraduationAtRateDenominator (required).</param>
        /// <param name="mGraduateAtMaxClusters">mGraduateAtMaxClusters (required).</param>
        /// <param name="mGraduateAtMaxSamples">mGraduateAtMaxSamples (required).</param>
        public MStreamingParameters(int? versionNumber = default(int?), bool? mEnableAutotuning = default(bool?), int? mSamplesToBufferForAutotuning = default(int?), int? mGraduationAtRateNumerator = default(int?), int? mGraduationAtRateDenominator = default(int?), int? mGraduateAtMaxClusters = default(int?), int? mGraduateAtMaxSamples = default(int?))
        {
            // to ensure "mSamplesToBufferForAutotuning" is required (not null)
            if (mSamplesToBufferForAutotuning == null)
            {
                throw new InvalidDataException("mSamplesToBufferForAutotuning is a required property for MStreamingParameters and cannot be null");
            }
            else
            {
                this.MSamplesToBufferForAutotuning = mSamplesToBufferForAutotuning;
            }
            // to ensure "mGraduationAtRateNumerator" is required (not null)
            if (mGraduationAtRateNumerator == null)
            {
                throw new InvalidDataException("mGraduationAtRateNumerator is a required property for MStreamingParameters and cannot be null");
            }
            else
            {
                this.MGraduationAtRateNumerator = mGraduationAtRateNumerator;
            }
            // to ensure "mGraduationAtRateDenominator" is required (not null)
            if (mGraduationAtRateDenominator == null)
            {
                throw new InvalidDataException("mGraduationAtRateDenominator is a required property for MStreamingParameters and cannot be null");
            }
            else
            {
                this.MGraduationAtRateDenominator = mGraduationAtRateDenominator;
            }
            // to ensure "mGraduateAtMaxClusters" is required (not null)
            if (mGraduateAtMaxClusters == null)
            {
                throw new InvalidDataException("mGraduateAtMaxClusters is a required property for MStreamingParameters and cannot be null");
            }
            else
            {
                this.MGraduateAtMaxClusters = mGraduateAtMaxClusters;
            }
            // to ensure "mGraduateAtMaxSamples" is required (not null)
            if (mGraduateAtMaxSamples == null)
            {
                throw new InvalidDataException("mGraduateAtMaxSamples is a required property for MStreamingParameters and cannot be null");
            }
            else
            {
                this.MGraduateAtMaxSamples = mGraduateAtMaxSamples;
            }
            this.VersionNumber = versionNumber;
            this.MEnableAutotuning = mEnableAutotuning;
        }
        
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MEnableAutotuning
        /// </summary>
        [DataMember(Name="m_EnableAutotuning", EmitDefaultValue=false)]
        public bool? MEnableAutotuning { get; set; }

        /// <summary>
        /// Gets or Sets MSamplesToBufferForAutotuning
        /// </summary>
        [DataMember(Name="m_SamplesToBufferForAutotuning", EmitDefaultValue=false)]
        public int? MSamplesToBufferForAutotuning { get; set; }

        /// <summary>
        /// Gets or Sets MGraduationAtRateNumerator
        /// </summary>
        [DataMember(Name="m_GraduationAtRateNumerator", EmitDefaultValue=false)]
        public int? MGraduationAtRateNumerator { get; set; }

        /// <summary>
        /// Gets or Sets MGraduationAtRateDenominator
        /// </summary>
        [DataMember(Name="m_GraduationAtRateDenominator", EmitDefaultValue=false)]
        public int? MGraduationAtRateDenominator { get; set; }

        /// <summary>
        /// Gets or Sets MGraduateAtMaxClusters
        /// </summary>
        [DataMember(Name="m_GraduateAtMaxClusters", EmitDefaultValue=false)]
        public int? MGraduateAtMaxClusters { get; set; }

        /// <summary>
        /// Gets or Sets MGraduateAtMaxSamples
        /// </summary>
        [DataMember(Name="m_GraduateAtMaxSamples", EmitDefaultValue=false)]
        public int? MGraduateAtMaxSamples { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MStreamingParameters {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MEnableAutotuning: ").Append(MEnableAutotuning).Append("\n");
            sb.Append("  MSamplesToBufferForAutotuning: ").Append(MSamplesToBufferForAutotuning).Append("\n");
            sb.Append("  MGraduationAtRateNumerator: ").Append(MGraduationAtRateNumerator).Append("\n");
            sb.Append("  MGraduationAtRateDenominator: ").Append(MGraduationAtRateDenominator).Append("\n");
            sb.Append("  MGraduateAtMaxClusters: ").Append(MGraduateAtMaxClusters).Append("\n");
            sb.Append("  MGraduateAtMaxSamples: ").Append(MGraduateAtMaxSamples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MStreamingParameters);
        }

        /// <summary>
        /// Returns true if MStreamingParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of MStreamingParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MStreamingParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.MEnableAutotuning == input.MEnableAutotuning ||
                    (this.MEnableAutotuning != null &&
                    this.MEnableAutotuning.Equals(input.MEnableAutotuning))
                ) && 
                (
                    this.MSamplesToBufferForAutotuning == input.MSamplesToBufferForAutotuning ||
                    (this.MSamplesToBufferForAutotuning != null &&
                    this.MSamplesToBufferForAutotuning.Equals(input.MSamplesToBufferForAutotuning))
                ) && 
                (
                    this.MGraduationAtRateNumerator == input.MGraduationAtRateNumerator ||
                    (this.MGraduationAtRateNumerator != null &&
                    this.MGraduationAtRateNumerator.Equals(input.MGraduationAtRateNumerator))
                ) && 
                (
                    this.MGraduationAtRateDenominator == input.MGraduationAtRateDenominator ||
                    (this.MGraduationAtRateDenominator != null &&
                    this.MGraduationAtRateDenominator.Equals(input.MGraduationAtRateDenominator))
                ) && 
                (
                    this.MGraduateAtMaxClusters == input.MGraduateAtMaxClusters ||
                    (this.MGraduateAtMaxClusters != null &&
                    this.MGraduateAtMaxClusters.Equals(input.MGraduateAtMaxClusters))
                ) && 
                (
                    this.MGraduateAtMaxSamples == input.MGraduateAtMaxSamples ||
                    (this.MGraduateAtMaxSamples != null &&
                    this.MGraduateAtMaxSamples.Equals(input.MGraduateAtMaxSamples))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.MEnableAutotuning != null)
                    hashCode = hashCode * 59 + this.MEnableAutotuning.GetHashCode();
                if (this.MSamplesToBufferForAutotuning != null)
                    hashCode = hashCode * 59 + this.MSamplesToBufferForAutotuning.GetHashCode();
                if (this.MGraduationAtRateNumerator != null)
                    hashCode = hashCode * 59 + this.MGraduationAtRateNumerator.GetHashCode();
                if (this.MGraduationAtRateDenominator != null)
                    hashCode = hashCode * 59 + this.MGraduationAtRateDenominator.GetHashCode();
                if (this.MGraduateAtMaxClusters != null)
                    hashCode = hashCode * 59 + this.MGraduateAtMaxClusters.GetHashCode();
                if (this.MGraduateAtMaxSamples != null)
                    hashCode = hashCode * 59 + this.MGraduateAtMaxSamples.GetHashCode();
                return hashCode;
            }
        }
    }
}
