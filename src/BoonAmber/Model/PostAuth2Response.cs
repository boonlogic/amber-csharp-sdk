/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// PostAuth2Response
    /// </summary>
    [DataContract(Name = "postAuth2Response")]
    public partial class PostAuth2Response : IEquatable<PostAuth2Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostAuth2Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostAuth2Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostAuth2Response" /> class.
        /// </summary>
        /// <param name="idToken">Identifier token to be used as Bearer token (required).</param>
        /// <param name="refreshToken">Refresh token identifier (required).</param>
        /// <param name="expiresIn">Amount of time before token expires (required).</param>
        /// <param name="tokenType">Type of authentication token (required).</param>
        public PostAuth2Response(string idToken = default(string), string refreshToken = default(string), string expiresIn = default(string), string tokenType = default(string))
        {
            // to ensure "idToken" is required (not null)
            if (idToken == null)
            {
                throw new ArgumentNullException("idToken is a required property for PostAuth2Response and cannot be null");
            }
            this.IdToken = idToken;
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new ArgumentNullException("refreshToken is a required property for PostAuth2Response and cannot be null");
            }
            this.RefreshToken = refreshToken;
            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new ArgumentNullException("expiresIn is a required property for PostAuth2Response and cannot be null");
            }
            this.ExpiresIn = expiresIn;
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new ArgumentNullException("tokenType is a required property for PostAuth2Response and cannot be null");
            }
            this.TokenType = tokenType;
        }

        /// <summary>
        /// Identifier token to be used as Bearer token
        /// </summary>
        /// <value>Identifier token to be used as Bearer token</value>
        [DataMember(Name = "idToken", IsRequired = true, EmitDefaultValue = false)]
        public string IdToken { get; set; }

        /// <summary>
        /// Refresh token identifier
        /// </summary>
        /// <value>Refresh token identifier</value>
        [DataMember(Name = "refreshToken", IsRequired = true, EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Amount of time before token expires
        /// </summary>
        /// <value>Amount of time before token expires</value>
        [DataMember(Name = "expiresIn", IsRequired = true, EmitDefaultValue = false)]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// Type of authentication token
        /// </summary>
        /// <value>Type of authentication token</value>
        [DataMember(Name = "tokenType", IsRequired = true, EmitDefaultValue = false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostAuth2Response {\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostAuth2Response);
        }

        /// <summary>
        /// Returns true if PostAuth2Response instances are equal
        /// </summary>
        /// <param name="input">Instance of PostAuth2Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostAuth2Response input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                ) &&
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) &&
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) &&
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdToken != null)
                {
                    hashCode = (hashCode * 59) + this.IdToken.GetHashCode();
                }
                if (this.RefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshToken.GetHashCode();
                }
                if (this.ExpiresIn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresIn.GetHashCode();
                }
                if (this.TokenType != null)
                {
                    hashCode = (hashCode * 59) + this.TokenType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
