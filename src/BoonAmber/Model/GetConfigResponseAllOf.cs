/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// GetConfigResponseAllOf
    /// </summary>
    [DataContract(Name = "getConfigResponse_allOf")]
    public partial class GetConfigResponseAllOf : IEquatable<GetConfigResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConfigResponseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetConfigResponseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConfigResponseAllOf" /> class.
        /// </summary>
        /// <param name="featureCount">number of features per sample (required).</param>
        /// <param name="streamingWindowSize">streaming window size (required).</param>
        /// <param name="features">features (required).</param>
        /// <param name="percentVariation">the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering (required).</param>
        /// <param name="samplesToBuffer">the number of samples to be applied before autotuning begins (required).</param>
        /// <param name="percentVariationOverride">override autotuned percent variation with this value.</param>
        public GetConfigResponseAllOf(int featureCount = default(int), int streamingWindowSize = default(int), List<FeatureConfig> features = default(List<FeatureConfig>), float percentVariation = default(float), int samplesToBuffer = default(int), float percentVariationOverride = default(float))
        {
            this.FeatureCount = featureCount;
            this.StreamingWindowSize = streamingWindowSize;
            // to ensure "features" is required (not null)
            if (features == null)
            {
                throw new ArgumentNullException("features is a required property for GetConfigResponseAllOf and cannot be null");
            }
            this.Features = features;
            this.PercentVariation = percentVariation;
            this.SamplesToBuffer = samplesToBuffer;
            this.PercentVariationOverride = percentVariationOverride;
        }

        /// <summary>
        /// number of features per sample
        /// </summary>
        /// <value>number of features per sample</value>
        [DataMember(Name = "featureCount", IsRequired = true, EmitDefaultValue = false)]
        public int FeatureCount { get; set; }

        /// <summary>
        /// streaming window size
        /// </summary>
        /// <value>streaming window size</value>
        [DataMember(Name = "streamingWindowSize", IsRequired = true, EmitDefaultValue = false)]
        public int StreamingWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", IsRequired = true, EmitDefaultValue = false)]
        public List<FeatureConfig> Features { get; set; }

        /// <summary>
        /// the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering
        /// </summary>
        /// <value>the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering</value>
        [DataMember(Name = "percentVariation", IsRequired = true, EmitDefaultValue = false)]
        public float PercentVariation { get; set; }

        /// <summary>
        /// the number of samples to be applied before autotuning begins
        /// </summary>
        /// <value>the number of samples to be applied before autotuning begins</value>
        [DataMember(Name = "samplesToBuffer", IsRequired = true, EmitDefaultValue = false)]
        public int SamplesToBuffer { get; set; }

        /// <summary>
        /// override autotuned percent variation with this value
        /// </summary>
        /// <value>override autotuned percent variation with this value</value>
        [DataMember(Name = "percentVariationOverride", EmitDefaultValue = false)]
        public float PercentVariationOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetConfigResponseAllOf {\n");
            sb.Append("  FeatureCount: ").Append(FeatureCount).Append("\n");
            sb.Append("  StreamingWindowSize: ").Append(StreamingWindowSize).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  PercentVariation: ").Append(PercentVariation).Append("\n");
            sb.Append("  SamplesToBuffer: ").Append(SamplesToBuffer).Append("\n");
            sb.Append("  PercentVariationOverride: ").Append(PercentVariationOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetConfigResponseAllOf);
        }

        /// <summary>
        /// Returns true if GetConfigResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of GetConfigResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetConfigResponseAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.FeatureCount == input.FeatureCount ||
                    this.FeatureCount.Equals(input.FeatureCount)
                ) &&
                (
                    this.StreamingWindowSize == input.StreamingWindowSize ||
                    this.StreamingWindowSize.Equals(input.StreamingWindowSize)
                ) &&
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) &&
                (
                    this.PercentVariation == input.PercentVariation ||
                    this.PercentVariation.Equals(input.PercentVariation)
                ) &&
                (
                    this.SamplesToBuffer == input.SamplesToBuffer ||
                    this.SamplesToBuffer.Equals(input.SamplesToBuffer)
                ) &&
                (
                    this.PercentVariationOverride == input.PercentVariationOverride ||
                    this.PercentVariationOverride.Equals(input.PercentVariationOverride)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FeatureCount.GetHashCode();
                hashCode = (hashCode * 59) + this.StreamingWindowSize.GetHashCode();
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentVariation.GetHashCode();
                hashCode = (hashCode * 59) + this.SamplesToBuffer.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentVariationOverride.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StreamingWindowSize (int) maximum
            if (this.StreamingWindowSize > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreamingWindowSize, must be a value less than or equal to 500.", new[] { "StreamingWindowSize" });
            }

            yield break;
        }
    }

}
