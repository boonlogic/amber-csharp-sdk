/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MAutotune
    /// </summary>
    [DataContract(Name = "m_Autotune")]
    public partial class MAutotune : IEquatable<MAutotune>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MAutotune" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MAutotune() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MAutotune" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mAutotuningInProgress">mAutotuningInProgress.</param>
        /// <param name="mPercentComplete">mPercentComplete.</param>
        /// <param name="mAutotuningSucceeded">mAutotuningSucceeded.</param>
        /// <param name="mNumPatternsToAutotune">mNumPatternsToAutotune.</param>
        /// <param name="mErrorStringBuffer">mErrorStringBuffer.</param>
        /// <param name="mFeaturesToTuneArray">mFeaturesToTuneArray.</param>
        /// <param name="mNCP">mNCP.</param>
        /// <param name="mAP">mAP (required).</param>
        public MAutotune(int versionNumber = default(int), bool mAutotuningInProgress = default(bool), decimal mPercentComplete = default(decimal), bool mAutotuningSucceeded = default(bool), int mNumPatternsToAutotune = default(int), string mErrorStringBuffer = default(string), List<bool> mFeaturesToTuneArray = default(List<bool>), MNCP mNCP = default(MNCP), MAP mAP = default(MAP))
        {
            // to ensure "mAP" is required (not null)
            if (mAP == null)
            {
                throw new ArgumentNullException("mAP is a required property for MAutotune and cannot be null");
            }
            this.MAP = mAP;
            this.VersionNumber = versionNumber;
            this.MAutotuningInProgress = mAutotuningInProgress;
            this.MPercentComplete = mPercentComplete;
            this.MAutotuningSucceeded = mAutotuningSucceeded;
            this.MNumPatternsToAutotune = mNumPatternsToAutotune;
            this.MErrorStringBuffer = mErrorStringBuffer;
            this.MFeaturesToTuneArray = mFeaturesToTuneArray;
            this.MNCP = mNCP;
        }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "VersionNumber", EmitDefaultValue = false)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuningInProgress
        /// </summary>
        [DataMember(Name = "m_AutotuningInProgress", EmitDefaultValue = true)]
        public bool MAutotuningInProgress { get; set; }

        /// <summary>
        /// Gets or Sets MPercentComplete
        /// </summary>
        [DataMember(Name = "m_PercentComplete", EmitDefaultValue = false)]
        public decimal MPercentComplete { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuningSucceeded
        /// </summary>
        [DataMember(Name = "m_AutotuningSucceeded", EmitDefaultValue = true)]
        public bool MAutotuningSucceeded { get; set; }

        /// <summary>
        /// Gets or Sets MNumPatternsToAutotune
        /// </summary>
        [DataMember(Name = "m_NumPatternsToAutotune", EmitDefaultValue = false)]
        public int MNumPatternsToAutotune { get; set; }

        /// <summary>
        /// Gets or Sets MErrorStringBuffer
        /// </summary>
        [DataMember(Name = "m_ErrorStringBuffer", EmitDefaultValue = false)]
        public string MErrorStringBuffer { get; set; }

        /// <summary>
        /// Gets or Sets MFeaturesToTuneArray
        /// </summary>
        [DataMember(Name = "m_FeaturesToTuneArray", EmitDefaultValue = false)]
        public List<bool> MFeaturesToTuneArray { get; set; }

        /// <summary>
        /// Gets or Sets MNCP
        /// </summary>
        [DataMember(Name = "m_NCP", EmitDefaultValue = false)]
        public MNCP MNCP { get; set; }

        /// <summary>
        /// Gets or Sets MAP
        /// </summary>
        [DataMember(Name = "m_AP", IsRequired = true, EmitDefaultValue = false)]
        public MAP MAP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MAutotune {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MAutotuningInProgress: ").Append(MAutotuningInProgress).Append("\n");
            sb.Append("  MPercentComplete: ").Append(MPercentComplete).Append("\n");
            sb.Append("  MAutotuningSucceeded: ").Append(MAutotuningSucceeded).Append("\n");
            sb.Append("  MNumPatternsToAutotune: ").Append(MNumPatternsToAutotune).Append("\n");
            sb.Append("  MErrorStringBuffer: ").Append(MErrorStringBuffer).Append("\n");
            sb.Append("  MFeaturesToTuneArray: ").Append(MFeaturesToTuneArray).Append("\n");
            sb.Append("  MNCP: ").Append(MNCP).Append("\n");
            sb.Append("  MAP: ").Append(MAP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MAutotune);
        }

        /// <summary>
        /// Returns true if MAutotune instances are equal
        /// </summary>
        /// <param name="input">Instance of MAutotune to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MAutotune input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.VersionNumber == input.VersionNumber ||
                    this.VersionNumber.Equals(input.VersionNumber)
                ) &&
                (
                    this.MAutotuningInProgress == input.MAutotuningInProgress ||
                    this.MAutotuningInProgress.Equals(input.MAutotuningInProgress)
                ) &&
                (
                    this.MPercentComplete == input.MPercentComplete ||
                    this.MPercentComplete.Equals(input.MPercentComplete)
                ) &&
                (
                    this.MAutotuningSucceeded == input.MAutotuningSucceeded ||
                    this.MAutotuningSucceeded.Equals(input.MAutotuningSucceeded)
                ) &&
                (
                    this.MNumPatternsToAutotune == input.MNumPatternsToAutotune ||
                    this.MNumPatternsToAutotune.Equals(input.MNumPatternsToAutotune)
                ) &&
                (
                    this.MErrorStringBuffer == input.MErrorStringBuffer ||
                    (this.MErrorStringBuffer != null &&
                    this.MErrorStringBuffer.Equals(input.MErrorStringBuffer))
                ) &&
                (
                    this.MFeaturesToTuneArray == input.MFeaturesToTuneArray ||
                    this.MFeaturesToTuneArray != null &&
                    input.MFeaturesToTuneArray != null &&
                    this.MFeaturesToTuneArray.SequenceEqual(input.MFeaturesToTuneArray)
                ) &&
                (
                    this.MNCP == input.MNCP ||
                    (this.MNCP != null &&
                    this.MNCP.Equals(input.MNCP))
                ) &&
                (
                    this.MAP == input.MAP ||
                    (this.MAP != null &&
                    this.MAP.Equals(input.MAP))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VersionNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.MAutotuningInProgress.GetHashCode();
                hashCode = (hashCode * 59) + this.MPercentComplete.GetHashCode();
                hashCode = (hashCode * 59) + this.MAutotuningSucceeded.GetHashCode();
                hashCode = (hashCode * 59) + this.MNumPatternsToAutotune.GetHashCode();
                if (this.MErrorStringBuffer != null)
                {
                    hashCode = (hashCode * 59) + this.MErrorStringBuffer.GetHashCode();
                }
                if (this.MFeaturesToTuneArray != null)
                {
                    hashCode = (hashCode * 59) + this.MFeaturesToTuneArray.GetHashCode();
                }
                if (this.MNCP != null)
                {
                    hashCode = (hashCode * 59) + this.MNCP.GetHashCode();
                }
                if (this.MAP != null)
                {
                    hashCode = (hashCode * 59) + this.MAP.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
