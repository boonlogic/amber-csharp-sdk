/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MAmberStatus
    /// </summary>
    [DataContract]
        public partial class MAmberStatus :  IEquatable<MAmberStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MAmberStatus" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mStatus">mStatus (required).</param>
        /// <param name="mMessage">mMessage.</param>
        /// <param name="mProgress">mProgress.</param>
        /// <param name="mCurrentClusterCount">mCurrentClusterCount (required).</param>
        /// <param name="mRetryCount">mRetryCount (required).</param>
        /// <param name="mStreamingWindowSize">mStreamingWindowSize (required).</param>
        /// <param name="mTotalInferences">mTotalInferences (required).</param>
        /// <param name="mTotalSamplesWritten">mTotalSamplesWritten.</param>
        public MAmberStatus(int? versionNumber = default(int?), string mStatus = default(string), string mMessage = default(string), int? mProgress = default(int?), int? mCurrentClusterCount = default(int?), int? mRetryCount = default(int?), int? mStreamingWindowSize = default(int?), int? mTotalInferences = default(int?), int? mTotalSamplesWritten = default(int?))
        {
            // to ensure "mStatus" is required (not null)
            if (mStatus == null)
            {
                throw new InvalidDataException("mStatus is a required property for MAmberStatus and cannot be null");
            }
            else
            {
                this.MStatus = mStatus;
            }
            // to ensure "mCurrentClusterCount" is required (not null)
            if (mCurrentClusterCount == null)
            {
                throw new InvalidDataException("mCurrentClusterCount is a required property for MAmberStatus and cannot be null");
            }
            else
            {
                this.MCurrentClusterCount = mCurrentClusterCount;
            }
            // to ensure "mRetryCount" is required (not null)
            if (mRetryCount == null)
            {
                throw new InvalidDataException("mRetryCount is a required property for MAmberStatus and cannot be null");
            }
            else
            {
                this.MRetryCount = mRetryCount;
            }
            // to ensure "mStreamingWindowSize" is required (not null)
            if (mStreamingWindowSize == null)
            {
                throw new InvalidDataException("mStreamingWindowSize is a required property for MAmberStatus and cannot be null");
            }
            else
            {
                this.MStreamingWindowSize = mStreamingWindowSize;
            }
            // to ensure "mTotalInferences" is required (not null)
            if (mTotalInferences == null)
            {
                throw new InvalidDataException("mTotalInferences is a required property for MAmberStatus and cannot be null");
            }
            else
            {
                this.MTotalInferences = mTotalInferences;
            }
            this.VersionNumber = versionNumber;
            this.MMessage = mMessage;
            this.MProgress = mProgress;
            this.MTotalSamplesWritten = mTotalSamplesWritten;
        }
        
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MStatus
        /// </summary>
        [DataMember(Name="m_Status", EmitDefaultValue=false)]
        public string MStatus { get; set; }

        /// <summary>
        /// Gets or Sets MMessage
        /// </summary>
        [DataMember(Name="m_Message", EmitDefaultValue=false)]
        public string MMessage { get; set; }

        /// <summary>
        /// Gets or Sets MProgress
        /// </summary>
        [DataMember(Name="m_Progress", EmitDefaultValue=false)]
        public int? MProgress { get; set; }

        /// <summary>
        /// Gets or Sets MCurrentClusterCount
        /// </summary>
        [DataMember(Name="m_CurrentClusterCount", EmitDefaultValue=false)]
        public int? MCurrentClusterCount { get; set; }

        /// <summary>
        /// Gets or Sets MRetryCount
        /// </summary>
        [DataMember(Name="m_RetryCount", EmitDefaultValue=false)]
        public int? MRetryCount { get; set; }

        /// <summary>
        /// Gets or Sets MStreamingWindowSize
        /// </summary>
        [DataMember(Name="m_StreamingWindowSize", EmitDefaultValue=false)]
        public int? MStreamingWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets MTotalInferences
        /// </summary>
        [DataMember(Name="m_TotalInferences", EmitDefaultValue=false)]
        public int? MTotalInferences { get; set; }

        /// <summary>
        /// Gets or Sets MTotalSamplesWritten
        /// </summary>
        [DataMember(Name="m_TotalSamplesWritten", EmitDefaultValue=false)]
        public int? MTotalSamplesWritten { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MAmberStatus {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MStatus: ").Append(MStatus).Append("\n");
            sb.Append("  MMessage: ").Append(MMessage).Append("\n");
            sb.Append("  MProgress: ").Append(MProgress).Append("\n");
            sb.Append("  MCurrentClusterCount: ").Append(MCurrentClusterCount).Append("\n");
            sb.Append("  MRetryCount: ").Append(MRetryCount).Append("\n");
            sb.Append("  MStreamingWindowSize: ").Append(MStreamingWindowSize).Append("\n");
            sb.Append("  MTotalInferences: ").Append(MTotalInferences).Append("\n");
            sb.Append("  MTotalSamplesWritten: ").Append(MTotalSamplesWritten).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MAmberStatus);
        }

        /// <summary>
        /// Returns true if MAmberStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of MAmberStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MAmberStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.MStatus == input.MStatus ||
                    (this.MStatus != null &&
                    this.MStatus.Equals(input.MStatus))
                ) && 
                (
                    this.MMessage == input.MMessage ||
                    (this.MMessage != null &&
                    this.MMessage.Equals(input.MMessage))
                ) && 
                (
                    this.MProgress == input.MProgress ||
                    (this.MProgress != null &&
                    this.MProgress.Equals(input.MProgress))
                ) && 
                (
                    this.MCurrentClusterCount == input.MCurrentClusterCount ||
                    (this.MCurrentClusterCount != null &&
                    this.MCurrentClusterCount.Equals(input.MCurrentClusterCount))
                ) && 
                (
                    this.MRetryCount == input.MRetryCount ||
                    (this.MRetryCount != null &&
                    this.MRetryCount.Equals(input.MRetryCount))
                ) && 
                (
                    this.MStreamingWindowSize == input.MStreamingWindowSize ||
                    (this.MStreamingWindowSize != null &&
                    this.MStreamingWindowSize.Equals(input.MStreamingWindowSize))
                ) && 
                (
                    this.MTotalInferences == input.MTotalInferences ||
                    (this.MTotalInferences != null &&
                    this.MTotalInferences.Equals(input.MTotalInferences))
                ) && 
                (
                    this.MTotalSamplesWritten == input.MTotalSamplesWritten ||
                    (this.MTotalSamplesWritten != null &&
                    this.MTotalSamplesWritten.Equals(input.MTotalSamplesWritten))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.MStatus != null)
                    hashCode = hashCode * 59 + this.MStatus.GetHashCode();
                if (this.MMessage != null)
                    hashCode = hashCode * 59 + this.MMessage.GetHashCode();
                if (this.MProgress != null)
                    hashCode = hashCode * 59 + this.MProgress.GetHashCode();
                if (this.MCurrentClusterCount != null)
                    hashCode = hashCode * 59 + this.MCurrentClusterCount.GetHashCode();
                if (this.MRetryCount != null)
                    hashCode = hashCode * 59 + this.MRetryCount.GetHashCode();
                if (this.MStreamingWindowSize != null)
                    hashCode = hashCode * 59 + this.MStreamingWindowSize.GetHashCode();
                if (this.MTotalInferences != null)
                    hashCode = hashCode * 59 + this.MTotalInferences.GetHashCode();
                if (this.MTotalSamplesWritten != null)
                    hashCode = hashCode * 59 + this.MTotalSamplesWritten.GetHashCode();
                return hashCode;
            }
        }
    }
}
