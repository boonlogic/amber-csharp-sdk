/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// GetSummaryResponse
    /// </summary>
    [DataContract]
        public partial class GetSummaryResponse :  IEquatable<GetSummaryResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSummaryResponse" /> class.
        /// </summary>
        /// <param name="magicNumber">magicNumber.</param>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mNano">mNano (required).</param>
        /// <param name="mBufferStats">mBufferStats.</param>
        /// <param name="mAutotune">mAutotune (required).</param>
        /// <param name="mAutotuningElbowClusterCounts">mAutotuningElbowClusterCounts (required).</param>
        /// <param name="mAutotuningElbowPVArray">mAutotuningElbowPVArray (required).</param>
        /// <param name="mStreamingParameters">mStreamingParameters (required).</param>
        /// <param name="mAmberStatus">mAmberStatus (required).</param>
        /// <param name="mTraining">mTraining (required).</param>
        /// <param name="mAnomalyThreshold">mAnomalyThreshold (required).</param>
        /// <param name="mAmberWarningCriticalValue">mAmberWarningCriticalValue (required).</param>
        /// <param name="mAmberAlertCriticalValue">mAmberAlertCriticalValue (required).</param>
        /// <param name="mErrorStringBuffer">mErrorStringBuffer.</param>
        /// <param name="mClusteringParametersInitialized">mClusteringParametersInitialized.</param>
        /// <param name="mStreamingMode">mStreamingMode.</param>
        /// <param name="mStreamingModeStatus">mStreamingModeStatus.</param>
        /// <param name="mModifiedAt">mModifiedAt.</param>
        /// <param name="mAnomalyMetricByAnomalyCount">mAnomalyMetricByAnomalyCount.</param>
        /// <param name="mRecentAnomalyCount">mRecentAnomalyCount.</param>
        /// <param name="mResultsIDArray">mResultsIDArray.</param>
        /// <param name="mTrainingSamples">mTrainingSamples.</param>
        /// <param name="mRecentSamples">mRecentSamples (required).</param>
        /// <param name="mRecentRawSamples">mRecentRawSamples (required).</param>
        /// <param name="mRecentTimes">mRecentTimes (required).</param>
        /// <param name="mRecentSIs">mRecentSIs (required).</param>
        /// <param name="mRecentRIs">mRecentRIs (required).</param>
        /// <param name="mRecentADs">mRecentADs (required).</param>
        /// <param name="mRecentAHs">mRecentAHs (required).</param>
        /// <param name="mRecentIDs">mRecentIDs.</param>
        /// <param name="mRecentAMs">mRecentAMs.</param>
        /// <param name="mRecentAWs">mRecentAWs (required).</param>
        public GetSummaryResponse(int? magicNumber = default(int?), int? versionNumber = default(int?), MNano mNano = default(MNano), MBufferStats mBufferStats = default(MBufferStats), MAutotune mAutotune = default(MAutotune), List<int?> mAutotuningElbowClusterCounts = default(List<int?>), List<float?> mAutotuningElbowPVArray = default(List<float?>), MStreamingParameters mStreamingParameters = default(MStreamingParameters), MAmberStatus mAmberStatus = default(MAmberStatus), MTraining mTraining = default(MTraining), int? mAnomalyThreshold = default(int?), int? mAmberWarningCriticalValue = default(int?), int? mAmberAlertCriticalValue = default(int?), string mErrorStringBuffer = default(string), bool? mClusteringParametersInitialized = default(bool?), bool? mStreamingMode = default(bool?), int? mStreamingModeStatus = default(int?), int? mModifiedAt = default(int?), List<float?> mAnomalyMetricByAnomalyCount = default(List<float?>), int? mRecentAnomalyCount = default(int?), List<int?> mResultsIDArray = default(List<int?>), MRecentSamples mTrainingSamples = default(MRecentSamples), MRecentSamples mRecentSamples = default(MRecentSamples), MRecentSamples mRecentRawSamples = default(MRecentSamples), MRecentTimes mRecentTimes = default(MRecentTimes), MRecentAnalytics mRecentSIs = default(MRecentAnalytics), MRecentAnalytics mRecentRIs = default(MRecentAnalytics), MRecentAnalytics mRecentADs = default(MRecentAnalytics), MRecentAnalytics mRecentAHs = default(MRecentAnalytics), MRecentIDs mRecentIDs = default(MRecentIDs), MRecentAMs mRecentAMs = default(MRecentAMs), MRecentAnalytics mRecentAWs = default(MRecentAnalytics))
        {
            // to ensure "mNano" is required (not null)
            if (mNano == null)
            {
                throw new InvalidDataException("mNano is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MNano = mNano;
            }
            // to ensure "mAutotune" is required (not null)
            if (mAutotune == null)
            {
                throw new InvalidDataException("mAutotune is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAutotune = mAutotune;
            }
            // to ensure "mAutotuningElbowClusterCounts" is required (not null)
            if (mAutotuningElbowClusterCounts == null)
            {
                throw new InvalidDataException("mAutotuningElbowClusterCounts is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAutotuningElbowClusterCounts = mAutotuningElbowClusterCounts;
            }
            // to ensure "mAutotuningElbowPVArray" is required (not null)
            if (mAutotuningElbowPVArray == null)
            {
                throw new InvalidDataException("mAutotuningElbowPVArray is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAutotuningElbowPVArray = mAutotuningElbowPVArray;
            }
            // to ensure "mStreamingParameters" is required (not null)
            if (mStreamingParameters == null)
            {
                throw new InvalidDataException("mStreamingParameters is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MStreamingParameters = mStreamingParameters;
            }
            // to ensure "mAmberStatus" is required (not null)
            if (mAmberStatus == null)
            {
                throw new InvalidDataException("mAmberStatus is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAmberStatus = mAmberStatus;
            }
            // to ensure "mTraining" is required (not null)
            if (mTraining == null)
            {
                throw new InvalidDataException("mTraining is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MTraining = mTraining;
            }
            // to ensure "mAnomalyThreshold" is required (not null)
            if (mAnomalyThreshold == null)
            {
                throw new InvalidDataException("mAnomalyThreshold is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAnomalyThreshold = mAnomalyThreshold;
            }
            // to ensure "mAmberWarningCriticalValue" is required (not null)
            if (mAmberWarningCriticalValue == null)
            {
                throw new InvalidDataException("mAmberWarningCriticalValue is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAmberWarningCriticalValue = mAmberWarningCriticalValue;
            }
            // to ensure "mAmberAlertCriticalValue" is required (not null)
            if (mAmberAlertCriticalValue == null)
            {
                throw new InvalidDataException("mAmberAlertCriticalValue is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MAmberAlertCriticalValue = mAmberAlertCriticalValue;
            }
            // to ensure "mRecentSamples" is required (not null)
            if (mRecentSamples == null)
            {
                throw new InvalidDataException("mRecentSamples is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentSamples = mRecentSamples;
            }
            // to ensure "mRecentRawSamples" is required (not null)
            if (mRecentRawSamples == null)
            {
                throw new InvalidDataException("mRecentRawSamples is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentRawSamples = mRecentRawSamples;
            }
            // to ensure "mRecentTimes" is required (not null)
            if (mRecentTimes == null)
            {
                throw new InvalidDataException("mRecentTimes is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentTimes = mRecentTimes;
            }
            // to ensure "mRecentSIs" is required (not null)
            if (mRecentSIs == null)
            {
                throw new InvalidDataException("mRecentSIs is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentSIs = mRecentSIs;
            }
            // to ensure "mRecentRIs" is required (not null)
            if (mRecentRIs == null)
            {
                throw new InvalidDataException("mRecentRIs is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentRIs = mRecentRIs;
            }
            // to ensure "mRecentADs" is required (not null)
            if (mRecentADs == null)
            {
                throw new InvalidDataException("mRecentADs is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentADs = mRecentADs;
            }
            // to ensure "mRecentAHs" is required (not null)
            if (mRecentAHs == null)
            {
                throw new InvalidDataException("mRecentAHs is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentAHs = mRecentAHs;
            }
            // to ensure "mRecentAWs" is required (not null)
            if (mRecentAWs == null)
            {
                throw new InvalidDataException("mRecentAWs is a required property for GetSummaryResponse and cannot be null");
            }
            else
            {
                this.MRecentAWs = mRecentAWs;
            }
            this.MagicNumber = magicNumber;
            this.VersionNumber = versionNumber;
            this.MBufferStats = mBufferStats;
            this.MErrorStringBuffer = mErrorStringBuffer;
            this.MClusteringParametersInitialized = mClusteringParametersInitialized;
            this.MStreamingMode = mStreamingMode;
            this.MStreamingModeStatus = mStreamingModeStatus;
            this.MModifiedAt = mModifiedAt;
            this.MAnomalyMetricByAnomalyCount = mAnomalyMetricByAnomalyCount;
            this.MRecentAnomalyCount = mRecentAnomalyCount;
            this.MResultsIDArray = mResultsIDArray;
            this.MTrainingSamples = mTrainingSamples;
            this.MRecentIDs = mRecentIDs;
            this.MRecentAMs = mRecentAMs;
        }
        
        /// <summary>
        /// Gets or Sets MagicNumber
        /// </summary>
        [DataMember(Name="MagicNumber", EmitDefaultValue=false)]
        public int? MagicNumber { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MNano
        /// </summary>
        [DataMember(Name="m_Nano", EmitDefaultValue=false)]
        public MNano MNano { get; set; }

        /// <summary>
        /// Gets or Sets MBufferStats
        /// </summary>
        [DataMember(Name="m_BufferStats", EmitDefaultValue=false)]
        public MBufferStats MBufferStats { get; set; }

        /// <summary>
        /// Gets or Sets MAutotune
        /// </summary>
        [DataMember(Name="m_Autotune", EmitDefaultValue=false)]
        public MAutotune MAutotune { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuningElbowClusterCounts
        /// </summary>
        [DataMember(Name="m_AutotuningElbowClusterCounts", EmitDefaultValue=false)]
        public List<int?> MAutotuningElbowClusterCounts { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuningElbowPVArray
        /// </summary>
        [DataMember(Name="m_AutotuningElbowPVArray", EmitDefaultValue=false)]
        public List<float?> MAutotuningElbowPVArray { get; set; }

        /// <summary>
        /// Gets or Sets MStreamingParameters
        /// </summary>
        [DataMember(Name="m_StreamingParameters", EmitDefaultValue=false)]
        public MStreamingParameters MStreamingParameters { get; set; }

        /// <summary>
        /// Gets or Sets MAmberStatus
        /// </summary>
        [DataMember(Name="m_AmberStatus", EmitDefaultValue=false)]
        public MAmberStatus MAmberStatus { get; set; }

        /// <summary>
        /// Gets or Sets MTraining
        /// </summary>
        [DataMember(Name="m_Training", EmitDefaultValue=false)]
        public MTraining MTraining { get; set; }

        /// <summary>
        /// Gets or Sets MAnomalyThreshold
        /// </summary>
        [DataMember(Name="m_AnomalyThreshold", EmitDefaultValue=false)]
        public int? MAnomalyThreshold { get; set; }

        /// <summary>
        /// Gets or Sets MAmberWarningCriticalValue
        /// </summary>
        [DataMember(Name="m_AmberWarningCriticalValue", EmitDefaultValue=false)]
        public int? MAmberWarningCriticalValue { get; set; }

        /// <summary>
        /// Gets or Sets MAmberAlertCriticalValue
        /// </summary>
        [DataMember(Name="m_AmberAlertCriticalValue", EmitDefaultValue=false)]
        public int? MAmberAlertCriticalValue { get; set; }

        /// <summary>
        /// Gets or Sets MErrorStringBuffer
        /// </summary>
        [DataMember(Name="m_ErrorStringBuffer", EmitDefaultValue=false)]
        public string MErrorStringBuffer { get; set; }

        /// <summary>
        /// Gets or Sets MClusteringParametersInitialized
        /// </summary>
        [DataMember(Name="m_ClusteringParametersInitialized", EmitDefaultValue=false)]
        public bool? MClusteringParametersInitialized { get; set; }

        /// <summary>
        /// Gets or Sets MStreamingMode
        /// </summary>
        [DataMember(Name="m_StreamingMode", EmitDefaultValue=false)]
        public bool? MStreamingMode { get; set; }

        /// <summary>
        /// Gets or Sets MStreamingModeStatus
        /// </summary>
        [DataMember(Name="m_StreamingModeStatus", EmitDefaultValue=false)]
        public int? MStreamingModeStatus { get; set; }

        /// <summary>
        /// Gets or Sets MModifiedAt
        /// </summary>
        [DataMember(Name="m_ModifiedAt", EmitDefaultValue=false)]
        public int? MModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets MAnomalyMetricByAnomalyCount
        /// </summary>
        [DataMember(Name="m_AnomalyMetricByAnomalyCount", EmitDefaultValue=false)]
        public List<float?> MAnomalyMetricByAnomalyCount { get; set; }

        /// <summary>
        /// Gets or Sets MRecentAnomalyCount
        /// </summary>
        [DataMember(Name="m_RecentAnomalyCount", EmitDefaultValue=false)]
        public int? MRecentAnomalyCount { get; set; }

        /// <summary>
        /// Gets or Sets MResultsIDArray
        /// </summary>
        [DataMember(Name="m_ResultsIDArray", EmitDefaultValue=false)]
        public List<int?> MResultsIDArray { get; set; }

        /// <summary>
        /// Gets or Sets MTrainingSamples
        /// </summary>
        [DataMember(Name="m_TrainingSamples", EmitDefaultValue=false)]
        public MRecentSamples MTrainingSamples { get; set; }

        /// <summary>
        /// Gets or Sets MRecentSamples
        /// </summary>
        [DataMember(Name="m_RecentSamples", EmitDefaultValue=false)]
        public MRecentSamples MRecentSamples { get; set; }

        /// <summary>
        /// Gets or Sets MRecentRawSamples
        /// </summary>
        [DataMember(Name="m_RecentRawSamples", EmitDefaultValue=false)]
        public MRecentSamples MRecentRawSamples { get; set; }

        /// <summary>
        /// Gets or Sets MRecentTimes
        /// </summary>
        [DataMember(Name="m_RecentTimes", EmitDefaultValue=false)]
        public MRecentTimes MRecentTimes { get; set; }

        /// <summary>
        /// Gets or Sets MRecentSIs
        /// </summary>
        [DataMember(Name="m_RecentSIs", EmitDefaultValue=false)]
        public MRecentAnalytics MRecentSIs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentRIs
        /// </summary>
        [DataMember(Name="m_RecentRIs", EmitDefaultValue=false)]
        public MRecentAnalytics MRecentRIs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentADs
        /// </summary>
        [DataMember(Name="m_RecentADs", EmitDefaultValue=false)]
        public MRecentAnalytics MRecentADs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentAHs
        /// </summary>
        [DataMember(Name="m_RecentAHs", EmitDefaultValue=false)]
        public MRecentAnalytics MRecentAHs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentIDs
        /// </summary>
        [DataMember(Name="m_RecentIDs", EmitDefaultValue=false)]
        public MRecentIDs MRecentIDs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentAMs
        /// </summary>
        [DataMember(Name="m_RecentAMs", EmitDefaultValue=false)]
        public MRecentAMs MRecentAMs { get; set; }

        /// <summary>
        /// Gets or Sets MRecentAWs
        /// </summary>
        [DataMember(Name="m_RecentAWs", EmitDefaultValue=false)]
        public MRecentAnalytics MRecentAWs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSummaryResponse {\n");
            sb.Append("  MagicNumber: ").Append(MagicNumber).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MNano: ").Append(MNano).Append("\n");
            sb.Append("  MBufferStats: ").Append(MBufferStats).Append("\n");
            sb.Append("  MAutotune: ").Append(MAutotune).Append("\n");
            sb.Append("  MAutotuningElbowClusterCounts: ").Append(MAutotuningElbowClusterCounts).Append("\n");
            sb.Append("  MAutotuningElbowPVArray: ").Append(MAutotuningElbowPVArray).Append("\n");
            sb.Append("  MStreamingParameters: ").Append(MStreamingParameters).Append("\n");
            sb.Append("  MAmberStatus: ").Append(MAmberStatus).Append("\n");
            sb.Append("  MTraining: ").Append(MTraining).Append("\n");
            sb.Append("  MAnomalyThreshold: ").Append(MAnomalyThreshold).Append("\n");
            sb.Append("  MAmberWarningCriticalValue: ").Append(MAmberWarningCriticalValue).Append("\n");
            sb.Append("  MAmberAlertCriticalValue: ").Append(MAmberAlertCriticalValue).Append("\n");
            sb.Append("  MErrorStringBuffer: ").Append(MErrorStringBuffer).Append("\n");
            sb.Append("  MClusteringParametersInitialized: ").Append(MClusteringParametersInitialized).Append("\n");
            sb.Append("  MStreamingMode: ").Append(MStreamingMode).Append("\n");
            sb.Append("  MStreamingModeStatus: ").Append(MStreamingModeStatus).Append("\n");
            sb.Append("  MModifiedAt: ").Append(MModifiedAt).Append("\n");
            sb.Append("  MAnomalyMetricByAnomalyCount: ").Append(MAnomalyMetricByAnomalyCount).Append("\n");
            sb.Append("  MRecentAnomalyCount: ").Append(MRecentAnomalyCount).Append("\n");
            sb.Append("  MResultsIDArray: ").Append(MResultsIDArray).Append("\n");
            sb.Append("  MTrainingSamples: ").Append(MTrainingSamples).Append("\n");
            sb.Append("  MRecentSamples: ").Append(MRecentSamples).Append("\n");
            sb.Append("  MRecentRawSamples: ").Append(MRecentRawSamples).Append("\n");
            sb.Append("  MRecentTimes: ").Append(MRecentTimes).Append("\n");
            sb.Append("  MRecentSIs: ").Append(MRecentSIs).Append("\n");
            sb.Append("  MRecentRIs: ").Append(MRecentRIs).Append("\n");
            sb.Append("  MRecentADs: ").Append(MRecentADs).Append("\n");
            sb.Append("  MRecentAHs: ").Append(MRecentAHs).Append("\n");
            sb.Append("  MRecentIDs: ").Append(MRecentIDs).Append("\n");
            sb.Append("  MRecentAMs: ").Append(MRecentAMs).Append("\n");
            sb.Append("  MRecentAWs: ").Append(MRecentAWs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSummaryResponse);
        }

        /// <summary>
        /// Returns true if GetSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSummaryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MagicNumber == input.MagicNumber ||
                    (this.MagicNumber != null &&
                    this.MagicNumber.Equals(input.MagicNumber))
                ) && 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.MNano == input.MNano ||
                    (this.MNano != null &&
                    this.MNano.Equals(input.MNano))
                ) && 
                (
                    this.MBufferStats == input.MBufferStats ||
                    (this.MBufferStats != null &&
                    this.MBufferStats.Equals(input.MBufferStats))
                ) && 
                (
                    this.MAutotune == input.MAutotune ||
                    (this.MAutotune != null &&
                    this.MAutotune.Equals(input.MAutotune))
                ) && 
                (
                    this.MAutotuningElbowClusterCounts == input.MAutotuningElbowClusterCounts ||
                    this.MAutotuningElbowClusterCounts != null &&
                    input.MAutotuningElbowClusterCounts != null &&
                    this.MAutotuningElbowClusterCounts.SequenceEqual(input.MAutotuningElbowClusterCounts)
                ) && 
                (
                    this.MAutotuningElbowPVArray == input.MAutotuningElbowPVArray ||
                    this.MAutotuningElbowPVArray != null &&
                    input.MAutotuningElbowPVArray != null &&
                    this.MAutotuningElbowPVArray.SequenceEqual(input.MAutotuningElbowPVArray)
                ) && 
                (
                    this.MStreamingParameters == input.MStreamingParameters ||
                    (this.MStreamingParameters != null &&
                    this.MStreamingParameters.Equals(input.MStreamingParameters))
                ) && 
                (
                    this.MAmberStatus == input.MAmberStatus ||
                    (this.MAmberStatus != null &&
                    this.MAmberStatus.Equals(input.MAmberStatus))
                ) && 
                (
                    this.MTraining == input.MTraining ||
                    (this.MTraining != null &&
                    this.MTraining.Equals(input.MTraining))
                ) && 
                (
                    this.MAnomalyThreshold == input.MAnomalyThreshold ||
                    (this.MAnomalyThreshold != null &&
                    this.MAnomalyThreshold.Equals(input.MAnomalyThreshold))
                ) && 
                (
                    this.MAmberWarningCriticalValue == input.MAmberWarningCriticalValue ||
                    (this.MAmberWarningCriticalValue != null &&
                    this.MAmberWarningCriticalValue.Equals(input.MAmberWarningCriticalValue))
                ) && 
                (
                    this.MAmberAlertCriticalValue == input.MAmberAlertCriticalValue ||
                    (this.MAmberAlertCriticalValue != null &&
                    this.MAmberAlertCriticalValue.Equals(input.MAmberAlertCriticalValue))
                ) && 
                (
                    this.MErrorStringBuffer == input.MErrorStringBuffer ||
                    (this.MErrorStringBuffer != null &&
                    this.MErrorStringBuffer.Equals(input.MErrorStringBuffer))
                ) && 
                (
                    this.MClusteringParametersInitialized == input.MClusteringParametersInitialized ||
                    (this.MClusteringParametersInitialized != null &&
                    this.MClusteringParametersInitialized.Equals(input.MClusteringParametersInitialized))
                ) && 
                (
                    this.MStreamingMode == input.MStreamingMode ||
                    (this.MStreamingMode != null &&
                    this.MStreamingMode.Equals(input.MStreamingMode))
                ) && 
                (
                    this.MStreamingModeStatus == input.MStreamingModeStatus ||
                    (this.MStreamingModeStatus != null &&
                    this.MStreamingModeStatus.Equals(input.MStreamingModeStatus))
                ) && 
                (
                    this.MModifiedAt == input.MModifiedAt ||
                    (this.MModifiedAt != null &&
                    this.MModifiedAt.Equals(input.MModifiedAt))
                ) && 
                (
                    this.MAnomalyMetricByAnomalyCount == input.MAnomalyMetricByAnomalyCount ||
                    this.MAnomalyMetricByAnomalyCount != null &&
                    input.MAnomalyMetricByAnomalyCount != null &&
                    this.MAnomalyMetricByAnomalyCount.SequenceEqual(input.MAnomalyMetricByAnomalyCount)
                ) && 
                (
                    this.MRecentAnomalyCount == input.MRecentAnomalyCount ||
                    (this.MRecentAnomalyCount != null &&
                    this.MRecentAnomalyCount.Equals(input.MRecentAnomalyCount))
                ) && 
                (
                    this.MResultsIDArray == input.MResultsIDArray ||
                    this.MResultsIDArray != null &&
                    input.MResultsIDArray != null &&
                    this.MResultsIDArray.SequenceEqual(input.MResultsIDArray)
                ) && 
                (
                    this.MTrainingSamples == input.MTrainingSamples ||
                    (this.MTrainingSamples != null &&
                    this.MTrainingSamples.Equals(input.MTrainingSamples))
                ) && 
                (
                    this.MRecentSamples == input.MRecentSamples ||
                    (this.MRecentSamples != null &&
                    this.MRecentSamples.Equals(input.MRecentSamples))
                ) && 
                (
                    this.MRecentRawSamples == input.MRecentRawSamples ||
                    (this.MRecentRawSamples != null &&
                    this.MRecentRawSamples.Equals(input.MRecentRawSamples))
                ) && 
                (
                    this.MRecentTimes == input.MRecentTimes ||
                    (this.MRecentTimes != null &&
                    this.MRecentTimes.Equals(input.MRecentTimes))
                ) && 
                (
                    this.MRecentSIs == input.MRecentSIs ||
                    (this.MRecentSIs != null &&
                    this.MRecentSIs.Equals(input.MRecentSIs))
                ) && 
                (
                    this.MRecentRIs == input.MRecentRIs ||
                    (this.MRecentRIs != null &&
                    this.MRecentRIs.Equals(input.MRecentRIs))
                ) && 
                (
                    this.MRecentADs == input.MRecentADs ||
                    (this.MRecentADs != null &&
                    this.MRecentADs.Equals(input.MRecentADs))
                ) && 
                (
                    this.MRecentAHs == input.MRecentAHs ||
                    (this.MRecentAHs != null &&
                    this.MRecentAHs.Equals(input.MRecentAHs))
                ) && 
                (
                    this.MRecentIDs == input.MRecentIDs ||
                    (this.MRecentIDs != null &&
                    this.MRecentIDs.Equals(input.MRecentIDs))
                ) && 
                (
                    this.MRecentAMs == input.MRecentAMs ||
                    (this.MRecentAMs != null &&
                    this.MRecentAMs.Equals(input.MRecentAMs))
                ) && 
                (
                    this.MRecentAWs == input.MRecentAWs ||
                    (this.MRecentAWs != null &&
                    this.MRecentAWs.Equals(input.MRecentAWs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MagicNumber != null)
                    hashCode = hashCode * 59 + this.MagicNumber.GetHashCode();
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.MNano != null)
                    hashCode = hashCode * 59 + this.MNano.GetHashCode();
                if (this.MBufferStats != null)
                    hashCode = hashCode * 59 + this.MBufferStats.GetHashCode();
                if (this.MAutotune != null)
                    hashCode = hashCode * 59 + this.MAutotune.GetHashCode();
                if (this.MAutotuningElbowClusterCounts != null)
                    hashCode = hashCode * 59 + this.MAutotuningElbowClusterCounts.GetHashCode();
                if (this.MAutotuningElbowPVArray != null)
                    hashCode = hashCode * 59 + this.MAutotuningElbowPVArray.GetHashCode();
                if (this.MStreamingParameters != null)
                    hashCode = hashCode * 59 + this.MStreamingParameters.GetHashCode();
                if (this.MAmberStatus != null)
                    hashCode = hashCode * 59 + this.MAmberStatus.GetHashCode();
                if (this.MTraining != null)
                    hashCode = hashCode * 59 + this.MTraining.GetHashCode();
                if (this.MAnomalyThreshold != null)
                    hashCode = hashCode * 59 + this.MAnomalyThreshold.GetHashCode();
                if (this.MAmberWarningCriticalValue != null)
                    hashCode = hashCode * 59 + this.MAmberWarningCriticalValue.GetHashCode();
                if (this.MAmberAlertCriticalValue != null)
                    hashCode = hashCode * 59 + this.MAmberAlertCriticalValue.GetHashCode();
                if (this.MErrorStringBuffer != null)
                    hashCode = hashCode * 59 + this.MErrorStringBuffer.GetHashCode();
                if (this.MClusteringParametersInitialized != null)
                    hashCode = hashCode * 59 + this.MClusteringParametersInitialized.GetHashCode();
                if (this.MStreamingMode != null)
                    hashCode = hashCode * 59 + this.MStreamingMode.GetHashCode();
                if (this.MStreamingModeStatus != null)
                    hashCode = hashCode * 59 + this.MStreamingModeStatus.GetHashCode();
                if (this.MModifiedAt != null)
                    hashCode = hashCode * 59 + this.MModifiedAt.GetHashCode();
                if (this.MAnomalyMetricByAnomalyCount != null)
                    hashCode = hashCode * 59 + this.MAnomalyMetricByAnomalyCount.GetHashCode();
                if (this.MRecentAnomalyCount != null)
                    hashCode = hashCode * 59 + this.MRecentAnomalyCount.GetHashCode();
                if (this.MResultsIDArray != null)
                    hashCode = hashCode * 59 + this.MResultsIDArray.GetHashCode();
                if (this.MTrainingSamples != null)
                    hashCode = hashCode * 59 + this.MTrainingSamples.GetHashCode();
                if (this.MRecentSamples != null)
                    hashCode = hashCode * 59 + this.MRecentSamples.GetHashCode();
                if (this.MRecentRawSamples != null)
                    hashCode = hashCode * 59 + this.MRecentRawSamples.GetHashCode();
                if (this.MRecentTimes != null)
                    hashCode = hashCode * 59 + this.MRecentTimes.GetHashCode();
                if (this.MRecentSIs != null)
                    hashCode = hashCode * 59 + this.MRecentSIs.GetHashCode();
                if (this.MRecentRIs != null)
                    hashCode = hashCode * 59 + this.MRecentRIs.GetHashCode();
                if (this.MRecentADs != null)
                    hashCode = hashCode * 59 + this.MRecentADs.GetHashCode();
                if (this.MRecentAHs != null)
                    hashCode = hashCode * 59 + this.MRecentAHs.GetHashCode();
                if (this.MRecentIDs != null)
                    hashCode = hashCode * 59 + this.MRecentIDs.GetHashCode();
                if (this.MRecentAMs != null)
                    hashCode = hashCode * 59 + this.MRecentAMs.GetHashCode();
                if (this.MRecentAWs != null)
                    hashCode = hashCode * 59 + this.MRecentAWs.GetHashCode();
                return hashCode;
            }
        }
    }
}
