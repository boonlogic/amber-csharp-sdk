/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// StreamStatus
    /// </summary>
    [DataContract(Name = "streamStatus")]
    public partial class StreamStatus : IEquatable<StreamStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamStatus" /> class.
        /// </summary>
        /// <param name="state">state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry (required).</param>
        /// <param name="message">message to accompany the current state (required).</param>
        /// <param name="progress">completion percentage (applies to Buffering and Autotuning states) (required).</param>
        /// <param name="clusterCount">current cluster count (applies to Learning and Monitoring states) (required).</param>
        /// <param name="retryCount">number of restarts that have happened during autotuning (required).</param>
        /// <param name="streamingWindowSize">the current streaming window size that is being used (required).</param>
        /// <param name="totalInferences">inferences since the most recent restart (required).</param>
        public StreamStatus(string state = default(string), string message = default(string), int progress = default(int), int clusterCount = default(int), int retryCount = default(int), int streamingWindowSize = default(int), int totalInferences = default(int))
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for StreamStatus and cannot be null");
            }
            this.State = state;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for StreamStatus and cannot be null");
            }
            this.Message = message;
            this.Progress = progress;
            this.ClusterCount = clusterCount;
            this.RetryCount = retryCount;
            this.StreamingWindowSize = streamingWindowSize;
            this.TotalInferences = totalInferences;
        }

        /// <summary>
        /// state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry
        /// </summary>
        /// <value>state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// message to accompany the current state
        /// </summary>
        /// <value>message to accompany the current state</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// completion percentage (applies to Buffering and Autotuning states)
        /// </summary>
        /// <value>completion percentage (applies to Buffering and Autotuning states)</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = false)]
        public int Progress { get; set; }

        /// <summary>
        /// current cluster count (applies to Learning and Monitoring states)
        /// </summary>
        /// <value>current cluster count (applies to Learning and Monitoring states)</value>
        [DataMember(Name = "clusterCount", IsRequired = true, EmitDefaultValue = false)]
        public int ClusterCount { get; set; }

        /// <summary>
        /// number of restarts that have happened during autotuning
        /// </summary>
        /// <value>number of restarts that have happened during autotuning</value>
        [DataMember(Name = "retryCount", IsRequired = true, EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// the current streaming window size that is being used
        /// </summary>
        /// <value>the current streaming window size that is being used</value>
        [DataMember(Name = "streamingWindowSize", IsRequired = true, EmitDefaultValue = false)]
        public int StreamingWindowSize { get; set; }

        /// <summary>
        /// inferences since the most recent restart
        /// </summary>
        /// <value>inferences since the most recent restart</value>
        [DataMember(Name = "totalInferences", IsRequired = true, EmitDefaultValue = false)]
        public int TotalInferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamStatus {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  ClusterCount: ").Append(ClusterCount).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  StreamingWindowSize: ").Append(StreamingWindowSize).Append("\n");
            sb.Append("  TotalInferences: ").Append(TotalInferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamStatus);
        }

        /// <summary>
        /// Returns true if StreamStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) && 
                (
                    this.ClusterCount == input.ClusterCount ||
                    this.ClusterCount.Equals(input.ClusterCount)
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    this.RetryCount.Equals(input.RetryCount)
                ) && 
                (
                    this.StreamingWindowSize == input.StreamingWindowSize ||
                    this.StreamingWindowSize.Equals(input.StreamingWindowSize)
                ) && 
                (
                    this.TotalInferences == input.TotalInferences ||
                    this.TotalInferences.Equals(input.TotalInferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                hashCode = (hashCode * 59) + this.ClusterCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryCount.GetHashCode();
                hashCode = (hashCode * 59) + this.StreamingWindowSize.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalInferences.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
