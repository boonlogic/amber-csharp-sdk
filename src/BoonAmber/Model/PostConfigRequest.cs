/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// PostConfigRequest
    /// </summary>
    [DataContract]
        public partial class PostConfigRequest : StreamingParameters,  IEquatable<PostConfigRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostConfigRequest" /> class.
        /// </summary>
        /// <param name="featureCount">number of features per sample (required).</param>
        /// <param name="streamingWindowSize">streaming window size (required).</param>
        /// <param name="features">features.</param>
        /// <param name="samplesToBuffer">the number of samples to be applied before autotuning begins.</param>
        /// <param name="percentVariationOverride">override autotuned percent variation with this value (default to -1.0).</param>
        public PostConfigRequest(int? featureCount = default(int?), int? streamingWindowSize = default(int?), List<FeatureConfig> features = default(List<FeatureConfig>), decimal? samplesToBuffer = default(decimal?), float? percentVariationOverride = -1.0f, decimal? anomalyHistoryWindow = default(decimal?), decimal? learningRateNumerator = default(decimal?), decimal? learningRateDenominator = default(decimal?), decimal? learningMaxClusters = default(decimal?), decimal? learningMaxSamples = default(decimal?)) : base()
        {
            // to ensure "featureCount" is required (not null)
            if (featureCount == null)
            {
                throw new InvalidDataException("featureCount is a required property for PostConfigRequest and cannot be null");
            }
            else
            {
                this.FeatureCount = featureCount;
            }
            // to ensure "streamingWindowSize" is required (not null)
            if (streamingWindowSize == null)
            {
                throw new InvalidDataException("streamingWindowSize is a required property for PostConfigRequest and cannot be null");
            }
            else
            {
                this.StreamingWindowSize = streamingWindowSize;
            }
            this.Features = features;
            this.SamplesToBuffer = samplesToBuffer;
            // use default value if no "percentVariationOverride" provided
            if (percentVariationOverride == null)
            {
                this.PercentVariationOverride = -1.0f;
            }
            else
            {
                this.PercentVariationOverride = percentVariationOverride;
            }
        }
        
        /// <summary>
        /// number of features per sample
        /// </summary>
        /// <value>number of features per sample</value>
        [DataMember(Name="featureCount", EmitDefaultValue=false)]
        public int? FeatureCount { get; set; }

        /// <summary>
        /// streaming window size
        /// </summary>
        /// <value>streaming window size</value>
        [DataMember(Name="streamingWindowSize", EmitDefaultValue=false)]
        public int? StreamingWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<FeatureConfig> Features { get; set; }

        /// <summary>
        /// the number of samples to be applied before autotuning begins
        /// </summary>
        /// <value>the number of samples to be applied before autotuning begins</value>
        [DataMember(Name="samplesToBuffer", EmitDefaultValue=false)]
        public decimal? SamplesToBuffer { get; set; }

        /// <summary>
        /// override autotuned percent variation with this value
        /// </summary>
        /// <value>override autotuned percent variation with this value</value>
        [DataMember(Name="percentVariationOverride", EmitDefaultValue=false)]
        public float? PercentVariationOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostConfigRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FeatureCount: ").Append(FeatureCount).Append("\n");
            sb.Append("  StreamingWindowSize: ").Append(StreamingWindowSize).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  SamplesToBuffer: ").Append(SamplesToBuffer).Append("\n");
            sb.Append("  PercentVariationOverride: ").Append(PercentVariationOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostConfigRequest);
        }

        /// <summary>
        /// Returns true if PostConfigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostConfigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostConfigRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.FeatureCount == input.FeatureCount ||
                    (this.FeatureCount != null &&
                    this.FeatureCount.Equals(input.FeatureCount))
                ) && base.Equals(input) && 
                (
                    this.StreamingWindowSize == input.StreamingWindowSize ||
                    (this.StreamingWindowSize != null &&
                    this.StreamingWindowSize.Equals(input.StreamingWindowSize))
                ) && base.Equals(input) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && base.Equals(input) && 
                (
                    this.SamplesToBuffer == input.SamplesToBuffer ||
                    (this.SamplesToBuffer != null &&
                    this.SamplesToBuffer.Equals(input.SamplesToBuffer))
                ) && base.Equals(input) && 
                (
                    this.PercentVariationOverride == input.PercentVariationOverride ||
                    (this.PercentVariationOverride != null &&
                    this.PercentVariationOverride.Equals(input.PercentVariationOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FeatureCount != null)
                    hashCode = hashCode * 59 + this.FeatureCount.GetHashCode();
                if (this.StreamingWindowSize != null)
                    hashCode = hashCode * 59 + this.StreamingWindowSize.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.SamplesToBuffer != null)
                    hashCode = hashCode * 59 + this.SamplesToBuffer.GetHashCode();
                if (this.PercentVariationOverride != null)
                    hashCode = hashCode * 59 + this.PercentVariationOverride.GetHashCode();
                return hashCode;
            }
        }
    }
}
