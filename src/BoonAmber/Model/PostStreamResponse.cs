/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// PostStreamResponse
    /// </summary>
    [DataContract(Name = "postStreamResponse")]
    public partial class PostStreamResponse : IEquatable<PostStreamResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostStreamResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostStreamResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostStreamResponse" /> class.
        /// </summary>
        /// <param name="state">state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry (required).</param>
        /// <param name="message">message to accompany the current state (required).</param>
        /// <param name="progress">completion percentage (applies to Buffering and Autotuning states) (required).</param>
        /// <param name="clusterCount">current cluster count (applies to Learning and Monitoring states) (required).</param>
        /// <param name="retryCount">number of restarts that have happened during autotuning (required).</param>
        /// <param name="streamingWindowSize">the current streaming window size that is being used (required).</param>
        /// <param name="totalInferences">inferences since the most recent restart (required).</param>
        /// <param name="iD">iD (required).</param>
        /// <param name="rI">rI (required).</param>
        /// <param name="sI">sI (required).</param>
        /// <param name="aD">aD (required).</param>
        /// <param name="aH">aH (required).</param>
        /// <param name="aM">aM (required).</param>
        /// <param name="aW">aW (required).</param>
        /// <param name="nI">nI (required).</param>
        /// <param name="nS">nS (required).</param>
        /// <param name="nW">nW (required).</param>
        /// <param name="oM">oM (required).</param>
        public PostStreamResponse(string state = default(string), string message = default(string), int progress = default(int), int clusterCount = default(int), int retryCount = default(int), int streamingWindowSize = default(int), int totalInferences = default(int), Int32Array iD = default(Int32Array), Uint16Array rI = default(Uint16Array), Uint16Array sI = default(Uint16Array), Uint16Array aD = default(Uint16Array), Uint16Array aH = default(Uint16Array), Float32Array aM = default(Float32Array), Uint16Array aW = default(Uint16Array), Uint16Array nI = default(Uint16Array), Uint16Array nS = default(Uint16Array), Float32Array nW = default(Float32Array), Float32Array oM = default(Float32Array))
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for PostStreamResponse and cannot be null");
            }
            this.State = state;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for PostStreamResponse and cannot be null");
            }
            this.Message = message;
            this.Progress = progress;
            this.ClusterCount = clusterCount;
            this.RetryCount = retryCount;
            this.StreamingWindowSize = streamingWindowSize;
            this.TotalInferences = totalInferences;
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new ArgumentNullException("iD is a required property for PostStreamResponse and cannot be null");
            }
            this.ID = iD;
            // to ensure "rI" is required (not null)
            if (rI == null)
            {
                throw new ArgumentNullException("rI is a required property for PostStreamResponse and cannot be null");
            }
            this.RI = rI;
            // to ensure "sI" is required (not null)
            if (sI == null)
            {
                throw new ArgumentNullException("sI is a required property for PostStreamResponse and cannot be null");
            }
            this.SI = sI;
            // to ensure "aD" is required (not null)
            if (aD == null)
            {
                throw new ArgumentNullException("aD is a required property for PostStreamResponse and cannot be null");
            }
            this.AD = aD;
            // to ensure "aH" is required (not null)
            if (aH == null)
            {
                throw new ArgumentNullException("aH is a required property for PostStreamResponse and cannot be null");
            }
            this.AH = aH;
            // to ensure "aM" is required (not null)
            if (aM == null)
            {
                throw new ArgumentNullException("aM is a required property for PostStreamResponse and cannot be null");
            }
            this.AM = aM;
            // to ensure "aW" is required (not null)
            if (aW == null)
            {
                throw new ArgumentNullException("aW is a required property for PostStreamResponse and cannot be null");
            }
            this.AW = aW;
            // to ensure "nI" is required (not null)
            if (nI == null)
            {
                throw new ArgumentNullException("nI is a required property for PostStreamResponse and cannot be null");
            }
            this.NI = nI;
            // to ensure "nS" is required (not null)
            if (nS == null)
            {
                throw new ArgumentNullException("nS is a required property for PostStreamResponse and cannot be null");
            }
            this.NS = nS;
            // to ensure "nW" is required (not null)
            if (nW == null)
            {
                throw new ArgumentNullException("nW is a required property for PostStreamResponse and cannot be null");
            }
            this.NW = nW;
            // to ensure "oM" is required (not null)
            if (oM == null)
            {
                throw new ArgumentNullException("oM is a required property for PostStreamResponse and cannot be null");
            }
            this.OM = oM;
        }

        /// <summary>
        /// state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry
        /// </summary>
        /// <value>state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// message to accompany the current state
        /// </summary>
        /// <value>message to accompany the current state</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// completion percentage (applies to Buffering and Autotuning states)
        /// </summary>
        /// <value>completion percentage (applies to Buffering and Autotuning states)</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = false)]
        public int Progress { get; set; }

        /// <summary>
        /// current cluster count (applies to Learning and Monitoring states)
        /// </summary>
        /// <value>current cluster count (applies to Learning and Monitoring states)</value>
        [DataMember(Name = "clusterCount", IsRequired = true, EmitDefaultValue = false)]
        public int ClusterCount { get; set; }

        /// <summary>
        /// number of restarts that have happened during autotuning
        /// </summary>
        /// <value>number of restarts that have happened during autotuning</value>
        [DataMember(Name = "retryCount", IsRequired = true, EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// the current streaming window size that is being used
        /// </summary>
        /// <value>the current streaming window size that is being used</value>
        [DataMember(Name = "streamingWindowSize", IsRequired = true, EmitDefaultValue = false)]
        public int StreamingWindowSize { get; set; }

        /// <summary>
        /// inferences since the most recent restart
        /// </summary>
        /// <value>inferences since the most recent restart</value>
        [DataMember(Name = "totalInferences", IsRequired = true, EmitDefaultValue = false)]
        public int TotalInferences { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", IsRequired = true, EmitDefaultValue = false)]
        public Int32Array ID { get; set; }

        /// <summary>
        /// Gets or Sets RI
        /// </summary>
        [DataMember(Name = "RI", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array RI { get; set; }

        /// <summary>
        /// Gets or Sets SI
        /// </summary>
        [DataMember(Name = "SI", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array SI { get; set; }

        /// <summary>
        /// Gets or Sets AD
        /// </summary>
        [DataMember(Name = "AD", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array AD { get; set; }

        /// <summary>
        /// Gets or Sets AH
        /// </summary>
        [DataMember(Name = "AH", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array AH { get; set; }

        /// <summary>
        /// Gets or Sets AM
        /// </summary>
        [DataMember(Name = "AM", IsRequired = true, EmitDefaultValue = false)]
        public Float32Array AM { get; set; }

        /// <summary>
        /// Gets or Sets AW
        /// </summary>
        [DataMember(Name = "AW", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array AW { get; set; }

        /// <summary>
        /// Gets or Sets NI
        /// </summary>
        [DataMember(Name = "NI", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array NI { get; set; }

        /// <summary>
        /// Gets or Sets NS
        /// </summary>
        [DataMember(Name = "NS", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array NS { get; set; }

        /// <summary>
        /// Gets or Sets NW
        /// </summary>
        [DataMember(Name = "NW", IsRequired = true, EmitDefaultValue = false)]
        public Float32Array NW { get; set; }

        /// <summary>
        /// Gets or Sets OM
        /// </summary>
        [DataMember(Name = "OM", IsRequired = true, EmitDefaultValue = false)]
        public Float32Array OM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostStreamResponse {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  ClusterCount: ").Append(ClusterCount).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  StreamingWindowSize: ").Append(StreamingWindowSize).Append("\n");
            sb.Append("  TotalInferences: ").Append(TotalInferences).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  RI: ").Append(RI).Append("\n");
            sb.Append("  SI: ").Append(SI).Append("\n");
            sb.Append("  AD: ").Append(AD).Append("\n");
            sb.Append("  AH: ").Append(AH).Append("\n");
            sb.Append("  AM: ").Append(AM).Append("\n");
            sb.Append("  AW: ").Append(AW).Append("\n");
            sb.Append("  NI: ").Append(NI).Append("\n");
            sb.Append("  NS: ").Append(NS).Append("\n");
            sb.Append("  NW: ").Append(NW).Append("\n");
            sb.Append("  OM: ").Append(OM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostStreamResponse);
        }

        /// <summary>
        /// Returns true if PostStreamResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostStreamResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostStreamResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) &&
                (
                    this.ClusterCount == input.ClusterCount ||
                    this.ClusterCount.Equals(input.ClusterCount)
                ) &&
                (
                    this.RetryCount == input.RetryCount ||
                    this.RetryCount.Equals(input.RetryCount)
                ) &&
                (
                    this.StreamingWindowSize == input.StreamingWindowSize ||
                    this.StreamingWindowSize.Equals(input.StreamingWindowSize)
                ) &&
                (
                    this.TotalInferences == input.TotalInferences ||
                    this.TotalInferences.Equals(input.TotalInferences)
                ) &&
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) &&
                (
                    this.RI == input.RI ||
                    (this.RI != null &&
                    this.RI.Equals(input.RI))
                ) &&
                (
                    this.SI == input.SI ||
                    (this.SI != null &&
                    this.SI.Equals(input.SI))
                ) &&
                (
                    this.AD == input.AD ||
                    (this.AD != null &&
                    this.AD.Equals(input.AD))
                ) &&
                (
                    this.AH == input.AH ||
                    (this.AH != null &&
                    this.AH.Equals(input.AH))
                ) &&
                (
                    this.AM == input.AM ||
                    (this.AM != null &&
                    this.AM.Equals(input.AM))
                ) &&
                (
                    this.AW == input.AW ||
                    (this.AW != null &&
                    this.AW.Equals(input.AW))
                ) &&
                (
                    this.NI == input.NI ||
                    (this.NI != null &&
                    this.NI.Equals(input.NI))
                ) &&
                (
                    this.NS == input.NS ||
                    (this.NS != null &&
                    this.NS.Equals(input.NS))
                ) &&
                (
                    this.NW == input.NW ||
                    (this.NW != null &&
                    this.NW.Equals(input.NW))
                ) &&
                (
                    this.OM == input.OM ||
                    (this.OM != null &&
                    this.OM.Equals(input.OM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                hashCode = (hashCode * 59) + this.ClusterCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryCount.GetHashCode();
                hashCode = (hashCode * 59) + this.StreamingWindowSize.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalInferences.GetHashCode();
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                if (this.RI != null)
                {
                    hashCode = (hashCode * 59) + this.RI.GetHashCode();
                }
                if (this.SI != null)
                {
                    hashCode = (hashCode * 59) + this.SI.GetHashCode();
                }
                if (this.AD != null)
                {
                    hashCode = (hashCode * 59) + this.AD.GetHashCode();
                }
                if (this.AH != null)
                {
                    hashCode = (hashCode * 59) + this.AH.GetHashCode();
                }
                if (this.AM != null)
                {
                    hashCode = (hashCode * 59) + this.AM.GetHashCode();
                }
                if (this.AW != null)
                {
                    hashCode = (hashCode * 59) + this.AW.GetHashCode();
                }
                if (this.NI != null)
                {
                    hashCode = (hashCode * 59) + this.NI.GetHashCode();
                }
                if (this.NS != null)
                {
                    hashCode = (hashCode * 59) + this.NS.GetHashCode();
                }
                if (this.NW != null)
                {
                    hashCode = (hashCode * 59) + this.NW.GetHashCode();
                }
                if (this.OM != null)
                {
                    hashCode = (hashCode * 59) + this.OM.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
