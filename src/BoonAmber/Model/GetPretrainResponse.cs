/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// GetPretrainResponse
    /// </summary>
    [DataContract]
        public partial class GetPretrainResponse :  IEquatable<GetPretrainResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPretrainResponse" /> class.
        /// </summary>
        /// <param name="state">state of pretraining, one of: None, Chunking, Pretraining, Pretrained, Error (required).</param>
        /// <param name="message">latest pretrain message.</param>
        public GetPretrainResponse(string state = default(string), string message = default(string))
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for GetPretrainResponse and cannot be null");
            }
            else
            {
                this.State = state;
            }
            this.Message = message;
        }
        
        /// <summary>
        /// state of pretraining, one of: None, Chunking, Pretraining, Pretrained, Error
        /// </summary>
        /// <value>state of pretraining, one of: None, Chunking, Pretraining, Pretrained, Error</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// latest pretrain message
        /// </summary>
        /// <value>latest pretrain message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPretrainResponse {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPretrainResponse);
        }

        /// <summary>
        /// Returns true if GetPretrainResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPretrainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPretrainResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }
    }
}
