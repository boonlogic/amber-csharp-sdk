/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// PutConfigRequest
    /// </summary>
    [DataContract(Name = "putConfigRequest")]
    public partial class PutConfigRequest : IEquatable<PutConfigRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutConfigRequest" /> class.
        /// </summary>
        /// <param name="features">features.</param>
        /// <param name="streaming">streaming.</param>
        public PutConfigRequest(List<FusionConfig> features = default(List<FusionConfig>), LearningParameters streaming = default(LearningParameters))
        {
            this.Features = features;
            this.Streaming = streaming;
        }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<FusionConfig> Features { get; set; }

        /// <summary>
        /// Gets or Sets Streaming
        /// </summary>
        [DataMember(Name = "streaming", EmitDefaultValue = false)]
        public LearningParameters Streaming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PutConfigRequest {\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Streaming: ").Append(Streaming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutConfigRequest);
        }

        /// <summary>
        /// Returns true if PutConfigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PutConfigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutConfigRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) &&
                (
                    this.Streaming == input.Streaming ||
                    (this.Streaming != null &&
                    this.Streaming.Equals(input.Streaming))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                if (this.Streaming != null)
                {
                    hashCode = (hashCode * 59) + this.Streaming.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
