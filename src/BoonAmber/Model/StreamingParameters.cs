/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// StreamingParameters
    /// </summary>
    [DataContract]
        public partial class StreamingParameters :  IEquatable<StreamingParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingParameters" /> class.
        /// </summary>
        /// <param name="anomalyHistoryWindow">the number of samples to use when calculating AH.</param>
        /// <param name="learningRateNumerator">enables graduation requirements for learning.</param>
        /// <param name="learningRateDenominator">enables graduation requirements for learning.</param>
        /// <param name="learningMaxClusters">learning graduation requirement for stopping learning upon reaching this cluster count.</param>
        /// <param name="learningMaxSamples">learning graduation requirement for stopping learning after acquiring this many samples.</param>
        public StreamingParameters(decimal? anomalyHistoryWindow = default(decimal?), decimal? learningRateNumerator = default(decimal?), decimal? learningRateDenominator = default(decimal?), decimal? learningMaxClusters = default(decimal?), decimal? learningMaxSamples = default(decimal?))
        {
            this.AnomalyHistoryWindow = anomalyHistoryWindow;
            this.LearningRateNumerator = learningRateNumerator;
            this.LearningRateDenominator = learningRateDenominator;
            this.LearningMaxClusters = learningMaxClusters;
            this.LearningMaxSamples = learningMaxSamples;
        }
        
        /// <summary>
        /// the number of samples to use when calculating AH
        /// </summary>
        /// <value>the number of samples to use when calculating AH</value>
        [DataMember(Name="anomalyHistoryWindow", EmitDefaultValue=false)]
        public decimal? AnomalyHistoryWindow { get; set; }

        /// <summary>
        /// enables graduation requirements for learning
        /// </summary>
        /// <value>enables graduation requirements for learning</value>
        [DataMember(Name="learningRateNumerator", EmitDefaultValue=false)]
        public decimal? LearningRateNumerator { get; set; }

        /// <summary>
        /// enables graduation requirements for learning
        /// </summary>
        /// <value>enables graduation requirements for learning</value>
        [DataMember(Name="learningRateDenominator", EmitDefaultValue=false)]
        public decimal? LearningRateDenominator { get; set; }

        /// <summary>
        /// learning graduation requirement for stopping learning upon reaching this cluster count
        /// </summary>
        /// <value>learning graduation requirement for stopping learning upon reaching this cluster count</value>
        [DataMember(Name="learningMaxClusters", EmitDefaultValue=false)]
        public decimal? LearningMaxClusters { get; set; }

        /// <summary>
        /// learning graduation requirement for stopping learning after acquiring this many samples
        /// </summary>
        /// <value>learning graduation requirement for stopping learning after acquiring this many samples</value>
        [DataMember(Name="learningMaxSamples", EmitDefaultValue=false)]
        public decimal? LearningMaxSamples { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamingParameters {\n");
            sb.Append("  AnomalyHistoryWindow: ").Append(AnomalyHistoryWindow).Append("\n");
            sb.Append("  LearningRateNumerator: ").Append(LearningRateNumerator).Append("\n");
            sb.Append("  LearningRateDenominator: ").Append(LearningRateDenominator).Append("\n");
            sb.Append("  LearningMaxClusters: ").Append(LearningMaxClusters).Append("\n");
            sb.Append("  LearningMaxSamples: ").Append(LearningMaxSamples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamingParameters);
        }

        /// <summary>
        /// Returns true if StreamingParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamingParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamingParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnomalyHistoryWindow == input.AnomalyHistoryWindow ||
                    (this.AnomalyHistoryWindow != null &&
                    this.AnomalyHistoryWindow.Equals(input.AnomalyHistoryWindow))
                ) && 
                (
                    this.LearningRateNumerator == input.LearningRateNumerator ||
                    (this.LearningRateNumerator != null &&
                    this.LearningRateNumerator.Equals(input.LearningRateNumerator))
                ) && 
                (
                    this.LearningRateDenominator == input.LearningRateDenominator ||
                    (this.LearningRateDenominator != null &&
                    this.LearningRateDenominator.Equals(input.LearningRateDenominator))
                ) && 
                (
                    this.LearningMaxClusters == input.LearningMaxClusters ||
                    (this.LearningMaxClusters != null &&
                    this.LearningMaxClusters.Equals(input.LearningMaxClusters))
                ) && 
                (
                    this.LearningMaxSamples == input.LearningMaxSamples ||
                    (this.LearningMaxSamples != null &&
                    this.LearningMaxSamples.Equals(input.LearningMaxSamples))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnomalyHistoryWindow != null)
                    hashCode = hashCode * 59 + this.AnomalyHistoryWindow.GetHashCode();
                if (this.LearningRateNumerator != null)
                    hashCode = hashCode * 59 + this.LearningRateNumerator.GetHashCode();
                if (this.LearningRateDenominator != null)
                    hashCode = hashCode * 59 + this.LearningRateDenominator.GetHashCode();
                if (this.LearningMaxClusters != null)
                    hashCode = hashCode * 59 + this.LearningMaxClusters.GetHashCode();
                if (this.LearningMaxSamples != null)
                    hashCode = hashCode * 59 + this.LearningMaxSamples.GetHashCode();
                return hashCode;
            }
        }
    }
}
