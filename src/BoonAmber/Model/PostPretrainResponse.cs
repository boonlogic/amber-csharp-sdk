/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// PostPretrainResponse
    /// </summary>
    [DataContract(Name = "postPretrainResponse")]
    public partial class PostPretrainResponse : IEquatable<PostPretrainResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPretrainResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostPretrainResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPretrainResponse" /> class.
        /// </summary>
        /// <param name="state">state of pretraining, one of: Chunking, Pretraining, Pretrained, Error (required).</param>
        /// <param name="amberTransaction">amberTransaction.</param>
        /// <param name="amberChunk">amberChunk.</param>
        /// <param name="message">latest pretrain message.</param>
        public PostPretrainResponse(string state = default(string), string amberTransaction = default(string), string amberChunk = default(string), string message = default(string))
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for PostPretrainResponse and cannot be null");
            }
            this.State = state;
            this.AmberTransaction = amberTransaction;
            this.AmberChunk = amberChunk;
            this.Message = message;
        }

        /// <summary>
        /// state of pretraining, one of: Chunking, Pretraining, Pretrained, Error
        /// </summary>
        /// <value>state of pretraining, one of: Chunking, Pretraining, Pretrained, Error</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets AmberTransaction
        /// </summary>
        [DataMember(Name = "amberTransaction", EmitDefaultValue = false)]
        public string AmberTransaction { get; set; }

        /// <summary>
        /// Gets or Sets AmberChunk
        /// </summary>
        [DataMember(Name = "amberChunk", EmitDefaultValue = false)]
        public string AmberChunk { get; set; }

        /// <summary>
        /// latest pretrain message
        /// </summary>
        /// <value>latest pretrain message</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPretrainResponse {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  AmberTransaction: ").Append(AmberTransaction).Append("\n");
            sb.Append("  AmberChunk: ").Append(AmberChunk).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPretrainResponse);
        }

        /// <summary>
        /// Returns true if PostPretrainResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPretrainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPretrainResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.AmberTransaction == input.AmberTransaction ||
                    (this.AmberTransaction != null &&
                    this.AmberTransaction.Equals(input.AmberTransaction))
                ) && 
                (
                    this.AmberChunk == input.AmberChunk ||
                    (this.AmberChunk != null &&
                    this.AmberChunk.Equals(input.AmberChunk))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.AmberTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.AmberTransaction.GetHashCode();
                }
                if (this.AmberChunk != null)
                {
                    hashCode = (hashCode * 59) + this.AmberChunk.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
