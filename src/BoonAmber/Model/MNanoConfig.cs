/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MNanoConfig
    /// </summary>
    [DataContract(Name = "m_NanoConfig")]
    public partial class MNanoConfig : IEquatable<MNanoConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MNanoConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MNanoConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MNanoConfig" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mNumericFormat">mNumericFormat.</param>
        /// <param name="mAccuracy">mAccuracy.</param>
        /// <param name="mPercentVariation">the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering (required).</param>
        /// <param name="numOfFeatures">numOfFeatures (required).</param>
        /// <param name="features">features (required).</param>
        public MNanoConfig(int versionNumber = default(int), int mNumericFormat = default(int), float mAccuracy = default(float), float mPercentVariation = default(float), int numOfFeatures = default(int), List<FeatureConfig> features = default(List<FeatureConfig>))
        {
            this.MPercentVariation = mPercentVariation;
            this.NumOfFeatures = numOfFeatures;
            // to ensure "features" is required (not null)
            if (features == null)
            {
                throw new ArgumentNullException("features is a required property for MNanoConfig and cannot be null");
            }
            this.Features = features;
            this.VersionNumber = versionNumber;
            this.MNumericFormat = mNumericFormat;
            this.MAccuracy = mAccuracy;
        }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "VersionNumber", EmitDefaultValue = false)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MNumericFormat
        /// </summary>
        [DataMember(Name = "m_NumericFormat", EmitDefaultValue = false)]
        public int MNumericFormat { get; set; }

        /// <summary>
        /// Gets or Sets MAccuracy
        /// </summary>
        [DataMember(Name = "m_Accuracy", EmitDefaultValue = false)]
        public float MAccuracy { get; set; }

        /// <summary>
        /// the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering
        /// </summary>
        /// <value>the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering</value>
        [DataMember(Name = "m_PercentVariation", IsRequired = true, EmitDefaultValue = false)]
        public float MPercentVariation { get; set; }

        /// <summary>
        /// Gets or Sets NumOfFeatures
        /// </summary>
        [DataMember(Name = "NumOfFeatures", IsRequired = true, EmitDefaultValue = false)]
        public int NumOfFeatures { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "Features", IsRequired = true, EmitDefaultValue = false)]
        public List<FeatureConfig> Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MNanoConfig {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MNumericFormat: ").Append(MNumericFormat).Append("\n");
            sb.Append("  MAccuracy: ").Append(MAccuracy).Append("\n");
            sb.Append("  MPercentVariation: ").Append(MPercentVariation).Append("\n");
            sb.Append("  NumOfFeatures: ").Append(NumOfFeatures).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MNanoConfig);
        }

        /// <summary>
        /// Returns true if MNanoConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of MNanoConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MNanoConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.VersionNumber == input.VersionNumber ||
                    this.VersionNumber.Equals(input.VersionNumber)
                ) &&
                (
                    this.MNumericFormat == input.MNumericFormat ||
                    this.MNumericFormat.Equals(input.MNumericFormat)
                ) &&
                (
                    this.MAccuracy == input.MAccuracy ||
                    this.MAccuracy.Equals(input.MAccuracy)
                ) &&
                (
                    this.MPercentVariation == input.MPercentVariation ||
                    this.MPercentVariation.Equals(input.MPercentVariation)
                ) &&
                (
                    this.NumOfFeatures == input.NumOfFeatures ||
                    this.NumOfFeatures.Equals(input.NumOfFeatures)
                ) &&
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VersionNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.MNumericFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.MAccuracy.GetHashCode();
                hashCode = (hashCode * 59) + this.MPercentVariation.GetHashCode();
                hashCode = (hashCode * 59) + this.NumOfFeatures.GetHashCode();
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
