/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.IO;
using BoonAmber.Client;
using BoonAmber.Model;
using Newtonsoft.Json;

namespace BoonAmber.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error DeleteSensor(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> DeleteSensorWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSummaryResponse</returns>
        GetSummaryResponse GetAmberSummary(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        ApiResponse<GetSummaryResponse> GetAmberSummaryWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConfigResponse</returns>
        GetConfigResponse GetConfig(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        ApiResponse<GetConfigResponse> GetConfigWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPretrainResponse</returns>
        GetPretrainResponse GetPretrain(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        ApiResponse<GetPretrainResponse> GetPretrainWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRootCauseResponse</returns>
        GetRootCauseResponse GetRootCause(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        ApiResponse<GetRootCauseResponse> GetRootCauseWithHttpInfo(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorResponse</returns>
        GetSensorResponse GetSensor(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        ApiResponse<GetSensorResponse> GetSensorWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorsResponse</returns>
        GetSensorsResponse GetSensors(int operationIndex = 0);

        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        ApiResponse<GetSensorsResponse> GetSensorsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusResponse</returns>
        GetStatusResponse GetStatus(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        ApiResponse<GetStatusResponse> GetStatusWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        ModelVersion GetVersion(int operationIndex = 0);

        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        ApiResponse<ModelVersion> GetVersionWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostConfigResponse</returns>
        PostConfigResponse PostConfig(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0);

        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        ApiResponse<PostConfigResponse> PostConfigWithHttpInfo(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0);
        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostAuth2Response</returns>
        PostAuth2Response PostOauth2(PostAuth2Request postAuth2Request, int operationIndex = 0);

        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        ApiResponse<PostAuth2Response> PostOauth2WithHttpInfo(PostAuth2Request postAuth2Request, int operationIndex = 0);
        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOutageResponse</returns>
        PostOutageResponse PostOutage(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        ApiResponse<PostOutageResponse> PostOutageWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostPretrainResponse</returns>
        PostPretrainResponse PostPretrain(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0);

        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        ApiResponse<PostPretrainResponse> PostPretrainWithHttpInfo(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSensorResponse</returns>
        PostSensorResponse PostSensor(PostSensorRequest postSensorRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        ApiResponse<PostSensorResponse> PostSensorWithHttpInfo(PostSensorRequest postSensorRequest, int operationIndex = 0);
        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostStreamResponse</returns>
        PostStreamResponse PostStream(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0);

        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        ApiResponse<PostStreamResponse> PostStreamWithHttpInfo(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0);
        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutConfigResponse</returns>
        PutConfigResponse PutConfig(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0);

        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        ApiResponse<PutConfigResponse> PutConfigWithHttpInfo(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0);
        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutSensorResponse</returns>
        PutSensorResponse PutSensor(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0);

        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        ApiResponse<PutSensorResponse> PutSensorWithHttpInfo(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0);
        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutStreamResponse</returns>
        PutStreamResponse PutStream(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0);

        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        ApiResponse<PutStreamResponse> PutStreamWithHttpInfo(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private BoonAmber.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        //Boon Authorization and License Variables
        private string token;
        private ulong reauth_time;
        private bool verify;

        ///<Summary>
        /// Oauth2 Username
        ///</Summary>
        public string username { get; }
        ///<Summary>
        /// Oauth2 Password
        ///</Summary>
        public string password { get; }
        ///<Summary>
        /// API Server
        ///</Summary>
        public string server { get; }
        ///<Summary>
        /// Oauth2 Server
        ///</Summary>
        public string oauth_server { get; }

        private ulong TimeNow()
        {
            TimeSpan t = DateTime.UtcNow - new DateTime(1970, 1, 1);
            ulong secondsSinceEpoch = (ulong)t.TotalSeconds;
            return secondsSinceEpoch;
        }

        /// <summary>
        /// Formats data as CSV in order to call PostStream
        /// </summary>
        /// <param name="data">Array of floating point data</param>
        /// <returns>
        /// String of CSV Data
        /// </returns>
        public string FormatData(float[] data)
        {
            var data_str = String.Join(",", data);
            return data_str;
        }

        /// <summary>
        /// Authenticate client for the next hour using the credentials given at
        /// initialization. This acquires and stores an oauth2 token which remains
        /// valid for one hour and is used to authenticate all other API requests.
        /// </summary>
        /// <returns></returns>
        public void Authenticate(bool force = false)
        {
            if (!force && TimeNow() <= this.reauth_time)
            {
                return; //Not Yet
            }

            //Request body
            var body = new PostAuth2Request(this.username, this.password);

            // post oauth2
            var response = PostOauth2(body);

            // Get Token
            this.token = response.IdToken;
            if (string.IsNullOrEmpty(this.token))
            {
                throw new BoonAmber.Client.ApiException(401, "authentication failed: invalid credentials");
            }

            //Get expiration
            ulong expire_secs = 0;
            if (ulong.TryParse(response.ExpiresIn, out expire_secs))
            {
                this.reauth_time = TimeNow() + expire_secs - 60;
            }
            else
            {
                throw new BoonAmber.Client.ApiException(401, "authentication failed: invalid expiration time");
            }

            string full_authorization = "Bearer " + this.token;
            this.Configuration.ApiKey.Add("Authorization", this.token);

            //Console.WriteLine("Authenticate: token: {0} reauth_time: {1}", this.token, this.reauth_time);
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="license_id">Unique identifier for license file</param>
        /// <param name="license_file">Amber license file path</param>
        /// <param name="verify">Whether or not to verify SSL Certs</param>
        /// <param name="timeout">Timeouts for API requests (milliseconds)</param>
        /// <returns></returns>
        public DefaultApi(string license_id = "default", string license_file = "~/.Amber.license", bool verify = true, int timeout = 300000)
        {
            this.token = null;
            this.reauth_time = 0;
            this.verify = verify;

            var user_agent = "BoonLogic/amber-csharp-sdk/requests";

            // first load from license file, override from environment if specified
            string license_path = Environment.GetEnvironmentVariable("AMBER_LICENSE_FILE");
            license_path = string.IsNullOrEmpty(license_path) ? license_file : license_path;

            // determine which license_id to use, override from environment if specified
            string license_identifier = Environment.GetEnvironmentVariable("AMBER_LICENSE_ID");
            license_identifier = string.IsNullOrEmpty(license_identifier) ? license_id : license_identifier;

            //empty
            this.username = "";
            this.password = "";
            this.server = "";
            this.oauth_server = "";

            try
            {
                // try to read license profile
                if (!string.IsNullOrEmpty(license_path))
                {

                    //Parse Linux Home Path
                    string home_path = license_path.Substring(0, 2);
                    if (home_path == "~/")
                    {
                        string file_path = license_path.Substring(2);
                        string full_home_path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                        license_path = Path.Combine(full_home_path, file_path);
                    }

                    if (File.Exists(license_path))
                    {
                        //Read JSON File
                        var jsonString = File.ReadAllText(license_path);
                        dynamic json_input = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);

                        //Parse Specific Profile
                        var profile = json_input[license_identifier];
                        this.username = profile["username"];
                        this.password = profile["password"];
                        this.server = profile["server"];
                        this.oauth_server = profile["oauth-server"];
                    }
                }
            }
            catch (Exception)
            {
                // Something went wrong trying to parse the file, continue
            }

            // override from environment if specified
            var temp_username = Environment.GetEnvironmentVariable("AMBER_USERNAME");
            this.username = string.IsNullOrEmpty(temp_username) ? this.username : temp_username;
            var temp_password = Environment.GetEnvironmentVariable("AMBER_PASSWORD");
            this.password = string.IsNullOrEmpty(temp_password) ? this.password : temp_password;
            var temp_server = Environment.GetEnvironmentVariable("AMBER_SERVER");
            this.server = string.IsNullOrEmpty(temp_server) ? this.server : temp_server;
            var temp_oauth_server = Environment.GetEnvironmentVariable("AMBER_OAUTH_SERVER");
            this.oauth_server = string.IsNullOrEmpty(temp_oauth_server) ? this.oauth_server : temp_oauth_server;

            //fallback oauth server to main server
            if (string.IsNullOrEmpty(this.oauth_server))
            {
                this.oauth_server = this.server;
            }

            string cert = Environment.GetEnvironmentVariable("AMBER_SSL_CERT");

            //check verify environment variable
            string verify_str = Environment.GetEnvironmentVariable("AMBER_SSL_VERIFY");
            if (!string.IsNullOrEmpty(verify_str))
            {
                bool temp_verify = false;
                if (bool.TryParse(verify_str, out temp_verify))
                {
                    this.verify = temp_verify;
                }
            }

            //Console.WriteLine("Amber: username: {0} password: {1} server: {2} oauth_server: {3} verify: {4}", this.username, this.password, this.server, this.oauth_server, this.verify);

            // verify required profile elements have been created
            if (this.username == "")
            {
                throw new InvalidOperationException("username not specified");
            }
            if (this.password == "")
            {
                throw new InvalidOperationException("password not specified");
            }
            if (this.server == "")
            {
                throw new InvalidOperationException("server not specified");
            }

            //Set the configuration
            this.Configuration = BoonAmber.Client.Configuration.MergeConfigurations(
                BoonAmber.Client.GlobalConfiguration.Instance,
                new BoonAmber.Client.Configuration { BasePath = this.server, Timeout = timeout, UserAgent = user_agent }
            );
            this.Configuration.DefaultHeaders.Add("Content-Type", "application/json");

            this.Client = new BoonAmber.Client.ApiClient(this.Configuration.BasePath, this.verify);
            this.OauthClient = new BoonAmber.Client.ApiClient(this.oauth_server, this.verify);
            this.ExceptionFactory = BoonAmber.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BoonAmber.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// The client for accessing the Oauth API synchronously.
        /// </summary>
        public BoonAmber.Client.ISynchronousClient OauthClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BoonAmber.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BoonAmber.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error DeleteSensor(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<Error> localVarResponse = DeleteSensorWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public BoonAmber.Client.ApiResponse<Error> DeleteSensorWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->DeleteSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Error>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSummaryResponse</returns>
        public GetSummaryResponse GetAmberSummary(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSummaryResponse> localVarResponse = GetAmberSummaryWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSummaryResponse> GetAmberSummaryWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetAmberSummary");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAmberSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSummaryResponse>("/__summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAmberSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConfigResponse</returns>
        public GetConfigResponse GetConfig(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetConfigResponse> localVarResponse = GetConfigWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<GetConfigResponse> GetConfigWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;


            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPretrainResponse</returns>
        public GetPretrainResponse GetPretrain(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetPretrainResponse> localVarResponse = GetPretrainWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        public BoonAmber.Client.ApiResponse<GetPretrainResponse> GetPretrainWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetPretrain");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRootCauseResponse</returns>
        public GetRootCauseResponse GetRootCause(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetRootCauseResponse> localVarResponse = GetRootCauseWithHttpInfo(sensorId, clusterID, pattern);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        public BoonAmber.Client.ApiResponse<GetRootCauseResponse> GetRootCauseWithHttpInfo(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetRootCause");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clusterID != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "clusterID", clusterID));
            }
            if (pattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "pattern", pattern));
            }
            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetRootCause";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRootCauseResponse>("/rootCause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRootCause", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorResponse</returns>
        public GetSensorResponse GetSensor(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSensorResponse> localVarResponse = GetSensorWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSensorResponse> GetSensorWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorsResponse</returns>
        public GetSensorsResponse GetSensors(int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSensorsResponse> localVarResponse = GetSensorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSensorsResponse> GetSensorsWithHttpInfo(int operationIndex = 0)
        {
            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSensors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSensorsResponse>("/sensors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusResponse</returns>
        public GetStatusResponse GetStatus(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetStatusResponse> localVarResponse = GetStatusWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        public BoonAmber.Client.ApiResponse<GetStatusResponse> GetStatusWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetStatus");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStatusResponse>("/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        public ModelVersion GetVersion(int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<ModelVersion> localVarResponse = GetVersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        public BoonAmber.Client.ApiResponse<ModelVersion> GetVersionWithHttpInfo(int operationIndex = 0)
        {
            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelVersion>("/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostConfigResponse</returns>
        public PostConfigResponse PostConfig(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostConfigResponse> localVarResponse = PostConfigWithHttpInfo(sensorId, postConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<PostConfigResponse> PostConfigWithHttpInfo(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostConfig");
            }

            // verify the required parameter 'postConfigRequest' is set
            if (postConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postConfigRequest' when calling DefaultApi->PostConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostAuth2Response</returns>
        public PostAuth2Response PostOauth2(PostAuth2Request postAuth2Request, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostAuth2Response> localVarResponse = PostOauth2WithHttpInfo(postAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        public BoonAmber.Client.ApiResponse<PostAuth2Response> PostOauth2WithHttpInfo(PostAuth2Request postAuth2Request, int operationIndex = 0)
        {
            // verify the required parameter 'postAuth2Request' is set
            if (postAuth2Request == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postAuth2Request' when calling DefaultApi->PostOauth2");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAuth2Request;

            localVarRequestOptions.Operation = "DefaultApi.PostOauth2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.OauthClient.Post<PostAuth2Response>("/oauth2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOauth2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOutageResponse</returns>
        public PostOutageResponse PostOutage(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostOutageResponse> localVarResponse = PostOutageWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        public BoonAmber.Client.ApiResponse<PostOutageResponse> PostOutageWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostOutage");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.PostOutage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostOutageResponse>("/outage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOutage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostPretrainResponse</returns>
        public PostPretrainResponse PostPretrain(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostPretrainResponse> localVarResponse = PostPretrainWithHttpInfo(sensorId, postPretrainRequest, amberChunk, amberTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        public BoonAmber.Client.ApiResponse<PostPretrainResponse> PostPretrainWithHttpInfo(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostPretrain");
            }

            // verify the required parameter 'postPretrainRequest' is set
            if (postPretrainRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postPretrainRequest' when calling DefaultApi->PostPretrain");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            if (amberChunk != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberChunk", BoonAmber.Client.ClientUtils.ParameterToString(amberChunk)); // header parameter
            }
            if (amberTransaction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberTransaction", BoonAmber.Client.ClientUtils.ParameterToString(amberTransaction)); // header parameter
            }
            localVarRequestOptions.Data = postPretrainRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSensorResponse</returns>
        public PostSensorResponse PostSensor(PostSensorRequest postSensorRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostSensorResponse> localVarResponse = PostSensorWithHttpInfo(postSensorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<PostSensorResponse> PostSensorWithHttpInfo(PostSensorRequest postSensorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postSensorRequest' is set
            if (postSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postSensorRequest' when calling DefaultApi->PostSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostStreamResponse</returns>
        public PostStreamResponse PostStream(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostStreamResponse> localVarResponse = PostStreamWithHttpInfo(sensorId, postStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        public BoonAmber.Client.ApiResponse<PostStreamResponse> PostStreamWithHttpInfo(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostStream");
            }

            // verify the required parameter 'postStreamRequest' is set
            if (postStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postStreamRequest' when calling DefaultApi->PostStream");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostStreamResponse>("/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutConfigResponse</returns>
        public PutConfigResponse PutConfig(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutConfigResponse> localVarResponse = PutConfigWithHttpInfo(sensorId, putConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<PutConfigResponse> PutConfigWithHttpInfo(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutConfig");
            }

            // verify the required parameter 'putConfigRequest' is set
            if (putConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putConfigRequest' when calling DefaultApi->PutConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutSensorResponse</returns>
        public PutSensorResponse PutSensor(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutSensorResponse> localVarResponse = PutSensorWithHttpInfo(sensorId, putSensorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<PutSensorResponse> PutSensorWithHttpInfo(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutSensor");
            }

            // verify the required parameter 'putSensorRequest' is set
            if (putSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putSensorRequest' when calling DefaultApi->PutSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutStreamResponse</returns>
        public PutStreamResponse PutStream(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutStreamResponse> localVarResponse = PutStreamWithHttpInfo(sensorId, putStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        public BoonAmber.Client.ApiResponse<PutStreamResponse> PutStreamWithHttpInfo(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutStream");
            }

            // verify the required parameter 'putStreamRequest' is set
            if (putStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putStreamRequest' when calling DefaultApi->PutStream");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutStreamResponse>("/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
