/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BoonAmber.Client;
using BoonAmber.Model;

namespace BoonAmber.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error DeleteSensor(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> DeleteSensorWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSummaryResponse</returns>
        GetSummaryResponse GetAmberSummary(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        ApiResponse<GetSummaryResponse> GetAmberSummaryWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConfigResponse</returns>
        GetConfigResponse GetConfig(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        ApiResponse<GetConfigResponse> GetConfigWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPretrainResponse</returns>
        GetPretrainResponse GetPretrain(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        ApiResponse<GetPretrainResponse> GetPretrainWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRootCauseResponse</returns>
        GetRootCauseResponse GetRootCause(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        ApiResponse<GetRootCauseResponse> GetRootCauseWithHttpInfo(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorResponse</returns>
        GetSensorResponse GetSensor(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        ApiResponse<GetSensorResponse> GetSensorWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorsResponse</returns>
        GetSensorsResponse GetSensors(int operationIndex = 0);

        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        ApiResponse<GetSensorsResponse> GetSensorsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusResponse</returns>
        GetStatusResponse GetStatus(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        ApiResponse<GetStatusResponse> GetStatusWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        ModelVersion GetVersion(int operationIndex = 0);

        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        ApiResponse<ModelVersion> GetVersionWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostConfigResponse</returns>
        PostConfigResponse PostConfig(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0);

        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        ApiResponse<PostConfigResponse> PostConfigWithHttpInfo(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0);
        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostAuth2Response</returns>
        PostAuth2Response PostOauth2(PostAuth2Request postAuth2Request, int operationIndex = 0);

        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        ApiResponse<PostAuth2Response> PostOauth2WithHttpInfo(PostAuth2Request postAuth2Request, int operationIndex = 0);
        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOutageResponse</returns>
        PostOutageResponse PostOutage(string sensorId, int operationIndex = 0);

        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        ApiResponse<PostOutageResponse> PostOutageWithHttpInfo(string sensorId, int operationIndex = 0);
        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostPretrainResponse</returns>
        PostPretrainResponse PostPretrain(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0);

        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        ApiResponse<PostPretrainResponse> PostPretrainWithHttpInfo(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSensorResponse</returns>
        PostSensorResponse PostSensor(PostSensorRequest postSensorRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        ApiResponse<PostSensorResponse> PostSensorWithHttpInfo(PostSensorRequest postSensorRequest, int operationIndex = 0);
        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostStreamResponse</returns>
        PostStreamResponse PostStream(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0);

        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        ApiResponse<PostStreamResponse> PostStreamWithHttpInfo(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0);
        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutConfigResponse</returns>
        PutConfigResponse PutConfig(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0);

        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        ApiResponse<PutConfigResponse> PutConfigWithHttpInfo(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0);
        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutSensorResponse</returns>
        PutSensorResponse PutSensor(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0);

        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        ApiResponse<PutSensorResponse> PutSensorWithHttpInfo(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0);
        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutStreamResponse</returns>
        PutStreamResponse PutStream(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0);

        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        ApiResponse<PutStreamResponse> PutStreamWithHttpInfo(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> DeleteSensorAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> DeleteSensorWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSummaryResponse</returns>
        System.Threading.Tasks.Task<GetSummaryResponse> GetAmberSummaryAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSummaryResponse>> GetAmberSummaryWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConfigResponse</returns>
        System.Threading.Tasks.Task<GetConfigResponse> GetConfigAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConfigResponse>> GetConfigWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPretrainResponse</returns>
        System.Threading.Tasks.Task<GetPretrainResponse> GetPretrainAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPretrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPretrainResponse>> GetPretrainWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRootCauseResponse</returns>
        System.Threading.Tasks.Task<GetRootCauseResponse> GetRootCauseAsync(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRootCauseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRootCauseResponse>> GetRootCauseWithHttpInfoAsync(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSensorResponse</returns>
        System.Threading.Tasks.Task<GetSensorResponse> GetSensorAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSensorResponse>> GetSensorWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSensorsResponse</returns>
        System.Threading.Tasks.Task<GetSensorsResponse> GetSensorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSensorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSensorsResponse>> GetSensorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatusResponse</returns>
        System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatusResponse>> GetStatusWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelVersion</returns>
        System.Threading.Tasks.Task<ModelVersion> GetVersionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelVersion>> GetVersionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostConfigResponse</returns>
        System.Threading.Tasks.Task<PostConfigResponse> PostConfigAsync(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostConfigResponse>> PostConfigWithHttpInfoAsync(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostAuth2Response</returns>
        System.Threading.Tasks.Task<PostAuth2Response> PostOauth2Async(PostAuth2Request postAuth2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostAuth2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostAuth2Response>> PostOauth2WithHttpInfoAsync(PostAuth2Request postAuth2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOutageResponse</returns>
        System.Threading.Tasks.Task<PostOutageResponse> PostOutageAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOutageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOutageResponse>> PostOutageWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostPretrainResponse</returns>
        System.Threading.Tasks.Task<PostPretrainResponse> PostPretrainAsync(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostPretrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostPretrainResponse>> PostPretrainWithHttpInfoAsync(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSensorResponse</returns>
        System.Threading.Tasks.Task<PostSensorResponse> PostSensorAsync(PostSensorRequest postSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSensorResponse>> PostSensorWithHttpInfoAsync(PostSensorRequest postSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostStreamResponse</returns>
        System.Threading.Tasks.Task<PostStreamResponse> PostStreamAsync(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostStreamResponse>> PostStreamWithHttpInfoAsync(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutConfigResponse</returns>
        System.Threading.Tasks.Task<PutConfigResponse> PutConfigAsync(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutConfigResponse>> PutConfigWithHttpInfoAsync(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutSensorResponse</returns>
        System.Threading.Tasks.Task<PutSensorResponse> PutSensorAsync(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutSensorResponse>> PutSensorWithHttpInfoAsync(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutStreamResponse</returns>
        System.Threading.Tasks.Task<PutStreamResponse> PutStreamAsync(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutStreamResponse>> PutStreamWithHttpInfoAsync(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private BoonAmber.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = BoonAmber.Client.Configuration.MergeConfigurations(
                BoonAmber.Client.GlobalConfiguration.Instance,
                new BoonAmber.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BoonAmber.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BoonAmber.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BoonAmber.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(BoonAmber.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BoonAmber.Client.Configuration.MergeConfigurations(
                BoonAmber.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BoonAmber.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BoonAmber.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BoonAmber.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(BoonAmber.Client.ISynchronousClient client, BoonAmber.Client.IAsynchronousClient asyncClient, BoonAmber.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BoonAmber.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BoonAmber.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BoonAmber.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BoonAmber.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BoonAmber.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error DeleteSensor(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<Error> localVarResponse = DeleteSensorWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public BoonAmber.Client.ApiResponse<Error> DeleteSensorWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->DeleteSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Error>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> DeleteSensorAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<Error> localVarResponse = await DeleteSensorWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<Error>> DeleteSensorWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->DeleteSensor");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Error>("/sensor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSummaryResponse</returns>
        public GetSummaryResponse GetAmberSummary(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSummaryResponse> localVarResponse = GetAmberSummaryWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSummaryResponse> GetAmberSummaryWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetAmberSummary");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAmberSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSummaryResponse>("/__summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAmberSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSummaryResponse</returns>
        public async System.Threading.Tasks.Task<GetSummaryResponse> GetAmberSummaryAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetSummaryResponse> localVarResponse = await GetAmberSummaryWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetSummaryResponse>> GetAmberSummaryWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetAmberSummary");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAmberSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSummaryResponse>("/__summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAmberSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConfigResponse</returns>
        public GetConfigResponse GetConfig(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetConfigResponse> localVarResponse = GetConfigWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<GetConfigResponse> GetConfigWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConfigResponse</returns>
        public async System.Threading.Tasks.Task<GetConfigResponse> GetConfigAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetConfigResponse> localVarResponse = await GetConfigWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConfigResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetConfigResponse>> GetConfigWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetConfig");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConfigResponse>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPretrainResponse</returns>
        public GetPretrainResponse GetPretrain(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetPretrainResponse> localVarResponse = GetPretrainWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        public BoonAmber.Client.ApiResponse<GetPretrainResponse> GetPretrainWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetPretrain");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPretrainResponse</returns>
        public async System.Threading.Tasks.Task<GetPretrainResponse> GetPretrainAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetPretrainResponse> localVarResponse = await GetPretrainWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPretrainResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetPretrainResponse>> GetPretrainWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetPretrain");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRootCauseResponse</returns>
        public GetRootCauseResponse GetRootCause(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetRootCauseResponse> localVarResponse = GetRootCauseWithHttpInfo(sensorId, clusterID, pattern);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        public BoonAmber.Client.ApiResponse<GetRootCauseResponse> GetRootCauseWithHttpInfo(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetRootCause");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clusterID != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "clusterID", clusterID));
            }
            if (pattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "pattern", pattern));
            }
            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetRootCause";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRootCauseResponse>("/rootCause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRootCause", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRootCauseResponse</returns>
        public async System.Threading.Tasks.Task<GetRootCauseResponse> GetRootCauseAsync(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetRootCauseResponse> localVarResponse = await GetRootCauseWithHttpInfoAsync(sensorId, clusterID, pattern, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRootCauseResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetRootCauseResponse>> GetRootCauseWithHttpInfoAsync(string sensorId, string? clusterID = default(string?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetRootCause");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clusterID != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "clusterID", clusterID));
            }
            if (pattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(BoonAmber.Client.ClientUtils.ParameterToMultiMap("", "pattern", pattern));
            }
            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetRootCause";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRootCauseResponse>("/rootCause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRootCause", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorResponse</returns>
        public GetSensorResponse GetSensor(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSensorResponse> localVarResponse = GetSensorWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSensorResponse> GetSensorWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSensorResponse</returns>
        public async System.Threading.Tasks.Task<GetSensorResponse> GetSensorAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetSensorResponse> localVarResponse = await GetSensorWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSensorResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetSensorResponse>> GetSensorWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetSensor");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSensorResponse>("/sensor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSensorsResponse</returns>
        public GetSensorsResponse GetSensors(int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetSensorsResponse> localVarResponse = GetSensorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        public BoonAmber.Client.ApiResponse<GetSensorsResponse> GetSensorsWithHttpInfo(int operationIndex = 0)
        {
            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSensors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSensorsResponse>("/sensors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSensorsResponse</returns>
        public async System.Threading.Tasks.Task<GetSensorsResponse> GetSensorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetSensorsResponse> localVarResponse = await GetSensorsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSensorsResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetSensorsResponse>> GetSensorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSensors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSensorsResponse>("/sensors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSensors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusResponse</returns>
        public GetStatusResponse GetStatus(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<GetStatusResponse> localVarResponse = GetStatusWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        public BoonAmber.Client.ApiResponse<GetStatusResponse> GetStatusWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetStatus");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStatusResponse>("/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<GetStatusResponse> localVarResponse = await GetStatusWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatusResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<GetStatusResponse>> GetStatusWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetStatus");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetStatusResponse>("/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        public ModelVersion GetVersion(int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<ModelVersion> localVarResponse = GetVersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        public BoonAmber.Client.ApiResponse<ModelVersion> GetVersionWithHttpInfo(int operationIndex = 0)
        {
            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelVersion>("/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelVersion</returns>
        public async System.Threading.Tasks.Task<ModelVersion> GetVersionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<ModelVersion> localVarResponse = await GetVersionWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelVersion)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<ModelVersion>> GetVersionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelVersion>("/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostConfigResponse</returns>
        public PostConfigResponse PostConfig(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostConfigResponse> localVarResponse = PostConfigWithHttpInfo(sensorId, postConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<PostConfigResponse> PostConfigWithHttpInfo(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostConfig");
            }

            // verify the required parameter 'postConfigRequest' is set
            if (postConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postConfigRequest' when calling DefaultApi->PostConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostConfigResponse</returns>
        public async System.Threading.Tasks.Task<PostConfigResponse> PostConfigAsync(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostConfigResponse> localVarResponse = await PostConfigWithHttpInfoAsync(sensorId, postConfigRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postConfigRequest">Sensor configuration to be applied</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostConfigResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostConfigResponse>> PostConfigWithHttpInfoAsync(string sensorId, PostConfigRequest postConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostConfig");
            }

            // verify the required parameter 'postConfigRequest' is set
            if (postConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postConfigRequest' when calling DefaultApi->PostConfig");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostConfigResponse>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostAuth2Response</returns>
        public PostAuth2Response PostOauth2(PostAuth2Request postAuth2Request, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostAuth2Response> localVarResponse = PostOauth2WithHttpInfo(postAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        public BoonAmber.Client.ApiResponse<PostAuth2Response> PostOauth2WithHttpInfo(PostAuth2Request postAuth2Request, int operationIndex = 0)
        {
            // verify the required parameter 'postAuth2Request' is set
            if (postAuth2Request == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postAuth2Request' when calling DefaultApi->PostOauth2");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAuth2Request;

            localVarRequestOptions.Operation = "DefaultApi.PostOauth2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostAuth2Response>("/oauth2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOauth2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostAuth2Response</returns>
        public async System.Threading.Tasks.Task<PostAuth2Response> PostOauth2Async(PostAuth2Request postAuth2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostAuth2Response> localVarResponse = await PostOauth2WithHttpInfoAsync(postAuth2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAuth2Request">Account credentials to be used for authentication</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostAuth2Response)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostAuth2Response>> PostOauth2WithHttpInfoAsync(PostAuth2Request postAuth2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postAuth2Request' is set
            if (postAuth2Request == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postAuth2Request' when calling DefaultApi->PostOauth2");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAuth2Request;

            localVarRequestOptions.Operation = "DefaultApi.PostOauth2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostAuth2Response>("/oauth2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOauth2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOutageResponse</returns>
        public PostOutageResponse PostOutage(string sensorId, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostOutageResponse> localVarResponse = PostOutageWithHttpInfo(sensorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        public BoonAmber.Client.ApiResponse<PostOutageResponse> PostOutageWithHttpInfo(string sensorId, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostOutage");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.PostOutage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostOutageResponse>("/outage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOutage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOutageResponse</returns>
        public async System.Threading.Tasks.Task<PostOutageResponse> PostOutageAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostOutageResponse> localVarResponse = await PostOutageWithHttpInfoAsync(sensorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOutageResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostOutageResponse>> PostOutageWithHttpInfoAsync(string sensorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostOutage");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter

            localVarRequestOptions.Operation = "DefaultApi.PostOutage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostOutageResponse>("/outage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOutage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostPretrainResponse</returns>
        public PostPretrainResponse PostPretrain(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostPretrainResponse> localVarResponse = PostPretrainWithHttpInfo(sensorId, postPretrainRequest, amberChunk, amberTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        public BoonAmber.Client.ApiResponse<PostPretrainResponse> PostPretrainWithHttpInfo(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostPretrain");
            }

            // verify the required parameter 'postPretrainRequest' is set
            if (postPretrainRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postPretrainRequest' when calling DefaultApi->PostPretrain");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            if (amberChunk != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberChunk", BoonAmber.Client.ClientUtils.ParameterToString(amberChunk)); // header parameter
            }
            if (amberTransaction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberTransaction", BoonAmber.Client.ClientUtils.ParameterToString(amberTransaction)); // header parameter
            }
            localVarRequestOptions.Data = postPretrainRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostPretrainResponse</returns>
        public async System.Threading.Tasks.Task<PostPretrainResponse> PostPretrainAsync(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostPretrainResponse> localVarResponse = await PostPretrainWithHttpInfoAsync(sensorId, postPretrainRequest, amberChunk, amberTransaction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postPretrainRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostPretrainResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostPretrainResponse>> PostPretrainWithHttpInfoAsync(string sensorId, PostPretrainRequest postPretrainRequest, string? amberChunk = default(string?), string? amberTransaction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostPretrain");
            }

            // verify the required parameter 'postPretrainRequest' is set
            if (postPretrainRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postPretrainRequest' when calling DefaultApi->PostPretrain");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            if (amberChunk != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberChunk", BoonAmber.Client.ClientUtils.ParameterToString(amberChunk)); // header parameter
            }
            if (amberTransaction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("amberTransaction", BoonAmber.Client.ClientUtils.ParameterToString(amberTransaction)); // header parameter
            }
            localVarRequestOptions.Data = postPretrainRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostPretrain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostPretrainResponse>("/pretrain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPretrain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSensorResponse</returns>
        public PostSensorResponse PostSensor(PostSensorRequest postSensorRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostSensorResponse> localVarResponse = PostSensorWithHttpInfo(postSensorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<PostSensorResponse> PostSensorWithHttpInfo(PostSensorRequest postSensorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postSensorRequest' is set
            if (postSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postSensorRequest' when calling DefaultApi->PostSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSensorResponse</returns>
        public async System.Threading.Tasks.Task<PostSensorResponse> PostSensorAsync(PostSensorRequest postSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostSensorResponse> localVarResponse = await PostSensorWithHttpInfoAsync(postSensorRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSensorRequest">Label for new sensor instance to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSensorResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostSensorResponse>> PostSensorWithHttpInfoAsync(PostSensorRequest postSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postSensorRequest' is set
            if (postSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postSensorRequest' when calling DefaultApi->PostSensor");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSensorResponse>("/sensor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostStreamResponse</returns>
        public PostStreamResponse PostStream(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PostStreamResponse> localVarResponse = PostStreamWithHttpInfo(sensorId, postStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        public BoonAmber.Client.ApiResponse<PostStreamResponse> PostStreamWithHttpInfo(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostStream");
            }

            // verify the required parameter 'postStreamRequest' is set
            if (postStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postStreamRequest' when calling DefaultApi->PostStream");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostStreamResponse>("/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostStreamResponse</returns>
        public async System.Threading.Tasks.Task<PostStreamResponse> PostStreamAsync(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PostStreamResponse> localVarResponse = await PostStreamWithHttpInfoAsync(sensorId, postStreamRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#39;s and 1&#39;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#39;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="postStreamRequest">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. \&quot;0,0.5,1,1.5,2\&quot;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostStreamResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PostStreamResponse>> PostStreamWithHttpInfoAsync(string sensorId, PostStreamRequest postStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostStream");
            }

            // verify the required parameter 'postStreamRequest' is set
            if (postStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'postStreamRequest' when calling DefaultApi->PostStream");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = postStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostStreamResponse>("/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutConfigResponse</returns>
        public PutConfigResponse PutConfig(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutConfigResponse> localVarResponse = PutConfigWithHttpInfo(sensorId, putConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        public BoonAmber.Client.ApiResponse<PutConfigResponse> PutConfigWithHttpInfo(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutConfig");
            }

            // verify the required parameter 'putConfigRequest' is set
            if (putConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putConfigRequest' when calling DefaultApi->PutConfig");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutConfigResponse>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutConfigResponse</returns>
        public async System.Threading.Tasks.Task<PutConfigResponse> PutConfigAsync(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PutConfigResponse> localVarResponse = await PutConfigWithHttpInfoAsync(sensorId, putConfigRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putConfigRequest">Updates to sensor configuration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutConfigResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PutConfigResponse>> PutConfigWithHttpInfoAsync(string sensorId, PutConfigRequest putConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutConfig");
            }

            // verify the required parameter 'putConfigRequest' is set
            if (putConfigRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putConfigRequest' when calling DefaultApi->PutConfig");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putConfigRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutConfigResponse>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutSensorResponse</returns>
        public PutSensorResponse PutSensor(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutSensorResponse> localVarResponse = PutSensorWithHttpInfo(sensorId, putSensorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        public BoonAmber.Client.ApiResponse<PutSensorResponse> PutSensorWithHttpInfo(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutSensor");
            }

            // verify the required parameter 'putSensorRequest' is set
            if (putSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putSensorRequest' when calling DefaultApi->PutSensor");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutSensorResponse>("/sensor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutSensorResponse</returns>
        public async System.Threading.Tasks.Task<PutSensorResponse> PutSensorAsync(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PutSensorResponse> localVarResponse = await PutSensorWithHttpInfoAsync(sensorId, putSensorRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putSensorRequest">New label to apply to sensor instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutSensorResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PutSensorResponse>> PutSensorWithHttpInfoAsync(string sensorId, PutSensorRequest putSensorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutSensor");
            }

            // verify the required parameter 'putSensorRequest' is set
            if (putSensorRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putSensorRequest' when calling DefaultApi->PutSensor");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putSensorRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutSensor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutSensorResponse>("/sensor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSensor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutStreamResponse</returns>
        public PutStreamResponse PutStream(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0)
        {
            BoonAmber.Client.ApiResponse<PutStreamResponse> localVarResponse = PutStreamWithHttpInfo(sensorId, putStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        public BoonAmber.Client.ApiResponse<PutStreamResponse> PutStreamWithHttpInfo(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutStream");
            }

            // verify the required parameter 'putStreamRequest' is set
            if (putStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putStreamRequest' when calling DefaultApi->PutStream");
            }

            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutStreamResponse>("/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutStreamResponse</returns>
        public async System.Threading.Tasks.Task<PutStreamResponse> PutStreamAsync(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BoonAmber.Client.ApiResponse<PutStreamResponse> localVarResponse = await PutStreamWithHttpInfoAsync(sensorId, putStreamRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="putStreamRequest">New values for sensor fusion vector.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutStreamResponse)</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Client.ApiResponse<PutStreamResponse>> PutStreamWithHttpInfoAsync(string sensorId, PutStreamRequest putStreamRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutStream");
            }

            // verify the required parameter 'putStreamRequest' is set
            if (putStreamRequest == null)
            {
                throw new BoonAmber.Client.ApiException(400, "Missing required parameter 'putStreamRequest' when calling DefaultApi->PutStream");
            }


            BoonAmber.Client.RequestOptions localVarRequestOptions = new BoonAmber.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BoonAmber.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BoonAmber.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("sensorId", BoonAmber.Client.ClientUtils.ParameterToString(sensorId)); // header parameter
            localVarRequestOptions.Data = putStreamRequest;

            localVarRequestOptions.Operation = "DefaultApi.PutStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authorize-amber-pool) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutStreamResponse>("/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
