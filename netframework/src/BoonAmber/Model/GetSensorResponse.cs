/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// GetSensorResponse
    /// </summary>
    [DataContract]
        public partial class GetSensorResponse :  IEquatable<GetSensorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSensorResponse" /> class.
        /// </summary>
        /// <param name="label">Additional label to be assigned for sensor (required).</param>
        /// <param name="sensorId">Unique identifier for sensor (required).</param>
        /// <param name="usageInfo">usageInfo (required).</param>
        public GetSensorResponse(string label = default(string), string sensorId = default(string), SensorUsageInfo usageInfo = default(SensorUsageInfo))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for GetSensorResponse and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "sensorId" is required (not null)
            if (sensorId == null)
            {
                throw new InvalidDataException("sensorId is a required property for GetSensorResponse and cannot be null");
            }
            else
            {
                this.SensorId = sensorId;
            }
            // to ensure "usageInfo" is required (not null)
            if (usageInfo == null)
            {
                throw new InvalidDataException("usageInfo is a required property for GetSensorResponse and cannot be null");
            }
            else
            {
                this.UsageInfo = usageInfo;
            }
        }
        
        /// <summary>
        /// Additional label to be assigned for sensor
        /// </summary>
        /// <value>Additional label to be assigned for sensor</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Unique identifier for sensor
        /// </summary>
        /// <value>Unique identifier for sensor</value>
        [DataMember(Name="sensorId", EmitDefaultValue=false)]
        public string SensorId { get; set; }

        /// <summary>
        /// Gets or Sets UsageInfo
        /// </summary>
        [DataMember(Name="usageInfo", EmitDefaultValue=false)]
        public SensorUsageInfo UsageInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSensorResponse {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  SensorId: ").Append(SensorId).Append("\n");
            sb.Append("  UsageInfo: ").Append(UsageInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSensorResponse);
        }

        /// <summary>
        /// Returns true if GetSensorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSensorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSensorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.SensorId == input.SensorId ||
                    (this.SensorId != null &&
                    this.SensorId.Equals(input.SensorId))
                ) && 
                (
                    this.UsageInfo == input.UsageInfo ||
                    (this.UsageInfo != null &&
                    this.UsageInfo.Equals(input.UsageInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.SensorId != null)
                    hashCode = hashCode * 59 + this.SensorId.GetHashCode();
                if (this.UsageInfo != null)
                    hashCode = hashCode * 59 + this.UsageInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
