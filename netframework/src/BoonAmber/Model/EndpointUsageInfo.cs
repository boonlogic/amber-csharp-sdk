/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// EndpointUsageInfo
    /// </summary>
    [DataContract]
        public partial class EndpointUsageInfo :  IEquatable<EndpointUsageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointUsageInfo" /> class.
        /// </summary>
        /// <param name="callsTotal">total number of calls to this endpoint (required).</param>
        /// <param name="callsThisPeriod">number of calls to this endpoint during the current billing period (required).</param>
        /// <param name="lastCalled">ISO formatted time of last call to this endpoint (required).</param>
        public EndpointUsageInfo(int? callsTotal = default(int?), int? callsThisPeriod = default(int?), string lastCalled = default(string))
        {
            // to ensure "callsTotal" is required (not null)
            if (callsTotal == null)
            {
                throw new InvalidDataException("callsTotal is a required property for EndpointUsageInfo and cannot be null");
            }
            else
            {
                this.CallsTotal = callsTotal;
            }
            // to ensure "callsThisPeriod" is required (not null)
            if (callsThisPeriod == null)
            {
                throw new InvalidDataException("callsThisPeriod is a required property for EndpointUsageInfo and cannot be null");
            }
            else
            {
                this.CallsThisPeriod = callsThisPeriod;
            }
            // to ensure "lastCalled" is required (not null)
            if (lastCalled == null)
            {
                throw new InvalidDataException("lastCalled is a required property for EndpointUsageInfo and cannot be null");
            }
            else
            {
                this.LastCalled = lastCalled;
            }
        }
        
        /// <summary>
        /// total number of calls to this endpoint
        /// </summary>
        /// <value>total number of calls to this endpoint</value>
        [DataMember(Name="callsTotal", EmitDefaultValue=false)]
        public int? CallsTotal { get; set; }

        /// <summary>
        /// number of calls to this endpoint during the current billing period
        /// </summary>
        /// <value>number of calls to this endpoint during the current billing period</value>
        [DataMember(Name="callsThisPeriod", EmitDefaultValue=false)]
        public int? CallsThisPeriod { get; set; }

        /// <summary>
        /// ISO formatted time of last call to this endpoint
        /// </summary>
        /// <value>ISO formatted time of last call to this endpoint</value>
        [DataMember(Name="lastCalled", EmitDefaultValue=false)]
        public string LastCalled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointUsageInfo {\n");
            sb.Append("  CallsTotal: ").Append(CallsTotal).Append("\n");
            sb.Append("  CallsThisPeriod: ").Append(CallsThisPeriod).Append("\n");
            sb.Append("  LastCalled: ").Append(LastCalled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointUsageInfo);
        }

        /// <summary>
        /// Returns true if EndpointUsageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointUsageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointUsageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallsTotal == input.CallsTotal ||
                    (this.CallsTotal != null &&
                    this.CallsTotal.Equals(input.CallsTotal))
                ) && 
                (
                    this.CallsThisPeriod == input.CallsThisPeriod ||
                    (this.CallsThisPeriod != null &&
                    this.CallsThisPeriod.Equals(input.CallsThisPeriod))
                ) && 
                (
                    this.LastCalled == input.LastCalled ||
                    (this.LastCalled != null &&
                    this.LastCalled.Equals(input.LastCalled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallsTotal != null)
                    hashCode = hashCode * 59 + this.CallsTotal.GetHashCode();
                if (this.CallsThisPeriod != null)
                    hashCode = hashCode * 59 + this.CallsThisPeriod.GetHashCode();
                if (this.LastCalled != null)
                    hashCode = hashCode * 59 + this.LastCalled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
