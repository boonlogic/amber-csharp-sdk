/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MRecentAnalytics
    /// </summary>
    [DataContract]
        public partial class MRecentAnalytics :  IEquatable<MRecentAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MRecentAnalytics" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mValues">mValues (required).</param>
        public MRecentAnalytics(int? versionNumber = default(int?), List<int?> mValues = default(List<int?>))
        {
            // to ensure "mValues" is required (not null)
            if (mValues == null)
            {
                throw new InvalidDataException("mValues is a required property for MRecentAnalytics and cannot be null");
            }
            else
            {
                this.MValues = mValues;
            }
            this.VersionNumber = versionNumber;
        }
        
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MValues
        /// </summary>
        [DataMember(Name="m_Values", EmitDefaultValue=false)]
        public List<int?> MValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MRecentAnalytics {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MValues: ").Append(MValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MRecentAnalytics);
        }

        /// <summary>
        /// Returns true if MRecentAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of MRecentAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MRecentAnalytics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.MValues == input.MValues ||
                    this.MValues != null &&
                    input.MValues != null &&
                    this.MValues.SequenceEqual(input.MValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.MValues != null)
                    hashCode = hashCode * 59 + this.MValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
