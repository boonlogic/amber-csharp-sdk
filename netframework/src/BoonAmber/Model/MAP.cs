/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BoonAmber.Client.SwaggerDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MAP
    /// </summary>
    [DataContract]
        public partial class MAP :  IEquatable<MAP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MAP" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mAutotuneRange">mAutotuneRange (required).</param>
        /// <param name="mAutotunePV">mAutotunePV (required).</param>
        /// <param name="mAutotuneByFeatures">mAutotuneByFeatures (required).</param>
        /// <param name="mMaxClusters">mMaxClusters.</param>
        /// <param name="mFeaturesToTuneArray">mFeaturesToTuneArray.</param>
        public MAP(int? versionNumber = default(int?), bool? mAutotuneRange = default(bool?), bool? mAutotunePV = default(bool?), bool? mAutotuneByFeatures = default(bool?), int? mMaxClusters = default(int?), List<int?> mFeaturesToTuneArray = default(List<int?>))
        {
            // to ensure "mAutotuneRange" is required (not null)
            if (mAutotuneRange == null)
            {
                throw new InvalidDataException("mAutotuneRange is a required property for MAP and cannot be null");
            }
            else
            {
                this.MAutotuneRange = mAutotuneRange;
            }
            // to ensure "mAutotunePV" is required (not null)
            if (mAutotunePV == null)
            {
                throw new InvalidDataException("mAutotunePV is a required property for MAP and cannot be null");
            }
            else
            {
                this.MAutotunePV = mAutotunePV;
            }
            // to ensure "mAutotuneByFeatures" is required (not null)
            if (mAutotuneByFeatures == null)
            {
                throw new InvalidDataException("mAutotuneByFeatures is a required property for MAP and cannot be null");
            }
            else
            {
                this.MAutotuneByFeatures = mAutotuneByFeatures;
            }
            this.VersionNumber = versionNumber;
            this.MMaxClusters = mMaxClusters;
            this.MFeaturesToTuneArray = mFeaturesToTuneArray;
        }
        
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuneRange
        /// </summary>
        [DataMember(Name="m_AutotuneRange", EmitDefaultValue=false)]
        public bool? MAutotuneRange { get; set; }

        /// <summary>
        /// Gets or Sets MAutotunePV
        /// </summary>
        [DataMember(Name="m_AutotunePV", EmitDefaultValue=false)]
        public bool? MAutotunePV { get; set; }

        /// <summary>
        /// Gets or Sets MAutotuneByFeatures
        /// </summary>
        [DataMember(Name="m_AutotuneByFeatures", EmitDefaultValue=false)]
        public bool? MAutotuneByFeatures { get; set; }

        /// <summary>
        /// Gets or Sets MMaxClusters
        /// </summary>
        [DataMember(Name="m_MaxClusters", EmitDefaultValue=false)]
        public int? MMaxClusters { get; set; }

        /// <summary>
        /// Gets or Sets MFeaturesToTuneArray
        /// </summary>
        [DataMember(Name="m_FeaturesToTuneArray", EmitDefaultValue=false)]
        public List<int?> MFeaturesToTuneArray { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MAP {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MAutotuneRange: ").Append(MAutotuneRange).Append("\n");
            sb.Append("  MAutotunePV: ").Append(MAutotunePV).Append("\n");
            sb.Append("  MAutotuneByFeatures: ").Append(MAutotuneByFeatures).Append("\n");
            sb.Append("  MMaxClusters: ").Append(MMaxClusters).Append("\n");
            sb.Append("  MFeaturesToTuneArray: ").Append(MFeaturesToTuneArray).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MAP);
        }

        /// <summary>
        /// Returns true if MAP instances are equal
        /// </summary>
        /// <param name="input">Instance of MAP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MAP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.MAutotuneRange == input.MAutotuneRange ||
                    (this.MAutotuneRange != null &&
                    this.MAutotuneRange.Equals(input.MAutotuneRange))
                ) && 
                (
                    this.MAutotunePV == input.MAutotunePV ||
                    (this.MAutotunePV != null &&
                    this.MAutotunePV.Equals(input.MAutotunePV))
                ) && 
                (
                    this.MAutotuneByFeatures == input.MAutotuneByFeatures ||
                    (this.MAutotuneByFeatures != null &&
                    this.MAutotuneByFeatures.Equals(input.MAutotuneByFeatures))
                ) && 
                (
                    this.MMaxClusters == input.MMaxClusters ||
                    (this.MMaxClusters != null &&
                    this.MMaxClusters.Equals(input.MMaxClusters))
                ) && 
                (
                    this.MFeaturesToTuneArray == input.MFeaturesToTuneArray ||
                    this.MFeaturesToTuneArray != null &&
                    input.MFeaturesToTuneArray != null &&
                    this.MFeaturesToTuneArray.SequenceEqual(input.MFeaturesToTuneArray)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.MAutotuneRange != null)
                    hashCode = hashCode * 59 + this.MAutotuneRange.GetHashCode();
                if (this.MAutotunePV != null)
                    hashCode = hashCode * 59 + this.MAutotunePV.GetHashCode();
                if (this.MAutotuneByFeatures != null)
                    hashCode = hashCode * 59 + this.MAutotuneByFeatures.GetHashCode();
                if (this.MMaxClusters != null)
                    hashCode = hashCode * 59 + this.MMaxClusters.GetHashCode();
                if (this.MFeaturesToTuneArray != null)
                    hashCode = hashCode * 59 + this.MFeaturesToTuneArray.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
