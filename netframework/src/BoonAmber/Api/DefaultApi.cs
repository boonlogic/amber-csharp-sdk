/* 
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using RestSharp;
using BoonAmber.Client;
using BoonAmber.Model;


namespace BoonAmber.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Error</returns>
        Error DeleteSensor (string sensorId);

        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> DeleteSensorWithHttpInfo (string sensorId);
        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetSummaryResponse</returns>
        GetSummaryResponse GetAmberSummary (string sensorId);

        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        ApiResponse<GetSummaryResponse> GetAmberSummaryWithHttpInfo (string sensorId);
        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetConfigResponse</returns>
        GetConfigResponse GetConfig (string sensorId);

        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        ApiResponse<GetConfigResponse> GetConfigWithHttpInfo (string sensorId);
        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetPretrainResponse</returns>
        GetPretrainResponse GetPretrain (string sensorId);

        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        ApiResponse<GetPretrainResponse> GetPretrainWithHttpInfo (string sensorId);
        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>GetRootCauseResponse</returns>
        GetRootCauseResponse GetRootCause (string sensorId, string clusterID = null, string pattern = null);

        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        ApiResponse<GetRootCauseResponse> GetRootCauseWithHttpInfo (string sensorId, string clusterID = null, string pattern = null);
        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetSensorResponse</returns>
        GetSensorResponse GetSensor (string sensorId);

        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        ApiResponse<GetSensorResponse> GetSensorWithHttpInfo (string sensorId);
        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSensorsResponse</returns>
        GetSensorsResponse GetSensors ();

        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        ApiResponse<GetSensorsResponse> GetSensorsWithHttpInfo ();
        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetStatusResponse</returns>
        GetStatusResponse GetStatus (string sensorId);

        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        ApiResponse<GetStatusResponse> GetStatusWithHttpInfo (string sensorId);
        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        BoonAmber.Model.Version GetVersion ();

        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        ApiResponse<BoonAmber.Model.Version> GetVersionWithHttpInfo ();
        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostConfigResponse</returns>
        PostConfigResponse PostConfig (PostConfigRequest body, string sensorId);

        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        ApiResponse<PostConfigResponse> PostConfigWithHttpInfo (PostConfigRequest body, string sensorId);
        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>PostAuth2Response</returns>
        PostAuth2Response PostOauth2 (PostAuth2Request body);

        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        ApiResponse<PostAuth2Response> PostOauth2WithHttpInfo (PostAuth2Request body);
        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostOutageResponse</returns>
        PostOutageResponse PostOutage (string sensorId);

        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        ApiResponse<PostOutageResponse> PostOutageWithHttpInfo (string sensorId);
        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>PostPretrainResponse</returns>
        PostPretrainResponse PostPretrain (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null);

        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        ApiResponse<PostPretrainResponse> PostPretrainWithHttpInfo (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null);
        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>PostSensorResponse</returns>
        PostSensorResponse PostSensor (PostSensorRequest body);

        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        ApiResponse<PostSensorResponse> PostSensorWithHttpInfo (PostSensorRequest body);
        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostStreamResponse</returns>
        PostStreamResponse PostStream (PostStreamRequest body, string sensorId);

        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        ApiResponse<PostStreamResponse> PostStreamWithHttpInfo (PostStreamRequest body, string sensorId);
        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutConfigResponse</returns>
        PutConfigResponse PutConfig (PutConfigRequest body, string sensorId);

        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        ApiResponse<PutConfigResponse> PutConfigWithHttpInfo (PutConfigRequest body, string sensorId);
        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutSensorResponse</returns>
        PutSensorResponse PutSensor (PutSensorRequest body, string sensorId);

        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        ApiResponse<PutSensorResponse> PutSensorWithHttpInfo (PutSensorRequest body, string sensorId);
        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutStreamResponse</returns>
        PutStreamResponse PutStream (PutStreamRequest body, string sensorId);

        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        ApiResponse<PutStreamResponse> PutStreamWithHttpInfo (PutStreamRequest body, string sensorId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> DeleteSensorAsync (string sensorId);

        /// <summary>
        /// Delete a sensor instance
        /// </summary>
        /// <remarks>
        /// Deletes the sensor instance with the specified sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> DeleteSensorAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetSummaryResponse</returns>
        System.Threading.Tasks.Task<GetSummaryResponse> GetAmberSummaryAsync (string sensorId);

        /// <summary>
        /// Get the JSON block of the amber image
        /// </summary>
        /// <remarks>
        /// Returns the json block of the amber sensor
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSummaryResponse>> GetAmberSummaryAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetConfigResponse</returns>
        System.Threading.Tasks.Task<GetConfigResponse> GetConfigAsync (string sensorId);

        /// <summary>
        /// Get the current configuration of a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns the current configuration of the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConfigResponse>> GetConfigAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetPretrainResponse</returns>
        System.Threading.Tasks.Task<GetPretrainResponse> GetPretrainAsync (string sensorId);

        /// <summary>
        /// Get status of pretrain operation
        /// </summary>
        /// <remarks>
        /// Get status of a sensor which is currently pretraining.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetPretrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPretrainResponse>> GetPretrainAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>Task of GetRootCauseResponse</returns>
        System.Threading.Tasks.Task<GetRootCauseResponse> GetRootCauseAsync (string sensorId, string clusterID = null, string pattern = null);

        /// <summary>
        /// Get root cause analysis information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information on the root cause for the clusters provided.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>Task of ApiResponse (GetRootCauseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRootCauseResponse>> GetRootCauseAsyncWithHttpInfo (string sensorId, string clusterID = null, string pattern = null);
        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetSensorResponse</returns>
        System.Threading.Tasks.Task<GetSensorResponse> GetSensorAsync (string sensorId);

        /// <summary>
        /// Get basic information about a sensor instance
        /// </summary>
        /// <remarks>
        /// Returns basic information about an existing sensor instance.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSensorResponse>> GetSensorAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSensorsResponse</returns>
        System.Threading.Tasks.Task<GetSensorsResponse> GetSensorsAsync ();

        /// <summary>
        /// List all sensors for this user
        /// </summary>
        /// <remarks>
        /// Returns a list of all current sensor instances for this user.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSensorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSensorsResponse>> GetSensorsAsyncWithHttpInfo ();
        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetStatusResponse</returns>
        System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync (string sensorId);

        /// <summary>
        /// Get analytic information from a sensor
        /// </summary>
        /// <remarks>
        /// Returns analytic information derived from data processed by a sensor thus far.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatusResponse>> GetStatusAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        System.Threading.Tasks.Task<BoonAmber.Model.Version> GetVersionAsync ();

        /// <summary>
        /// Retrieves API version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoonAmber.Model.Version>> GetVersionAsyncWithHttpInfo ();
        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostConfigResponse</returns>
        System.Threading.Tasks.Task<PostConfigResponse> PostConfigAsync (PostConfigRequest body, string sensorId);

        /// <summary>
        /// Apply configuration to a sensor instance
        /// </summary>
        /// <remarks>
        /// Applies the provided configuration to the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostConfigResponse>> PostConfigAsyncWithHttpInfo (PostConfigRequest body, string sensorId);
        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>Task of PostAuth2Response</returns>
        System.Threading.Tasks.Task<PostAuth2Response> PostOauth2Async (PostAuth2Request body);

        /// <summary>
        /// Request a bearer token using Amber account credentials
        /// </summary>
        /// <remarks>
        /// Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>Task of ApiResponse (PostAuth2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostAuth2Response>> PostOauth2AsyncWithHttpInfo (PostAuth2Request body);
        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostOutageResponse</returns>
        System.Threading.Tasks.Task<PostOutageResponse> PostOutageAsync (string sensorId);

        /// <summary>
        /// Informs the server of an outage
        /// </summary>
        /// <remarks>
        /// Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostOutageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOutageResponse>> PostOutageAsyncWithHttpInfo (string sensorId);
        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>Task of PostPretrainResponse</returns>
        System.Threading.Tasks.Task<PostPretrainResponse> PostPretrainAsync (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null);

        /// <summary>
        /// Pretrain a sensor using historical data
        /// </summary>
        /// <remarks>
        /// Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>Task of ApiResponse (PostPretrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostPretrainResponse>> PostPretrainAsyncWithHttpInfo (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null);
        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>Task of PostSensorResponse</returns>
        System.Threading.Tasks.Task<PostSensorResponse> PostSensorAsync (PostSensorRequest body);

        /// <summary>
        /// Create a new a sensor instance
        /// </summary>
        /// <remarks>
        /// Spawns a new sensor instance, returning its unique sensorId.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>Task of ApiResponse (PostSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSensorResponse>> PostSensorAsyncWithHttpInfo (PostSensorRequest body);
        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostStreamResponse</returns>
        System.Threading.Tasks.Task<PostStreamResponse> PostStreamAsync (PostStreamRequest body, string sensorId);

        /// <summary>
        /// Stream data to a sensor
        /// </summary>
        /// <remarks>
        /// Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostStreamResponse>> PostStreamAsyncWithHttpInfo (PostStreamRequest body, string sensorId);
        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutConfigResponse</returns>
        System.Threading.Tasks.Task<PutConfigResponse> PutConfigAsync (PutConfigRequest body, string sensorId);

        /// <summary>
        /// Update configuration for a sensor instance
        /// </summary>
        /// <remarks>
        /// Updates the configuration for the sensor instance specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutConfigResponse>> PutConfigAsyncWithHttpInfo (PutConfigRequest body, string sensorId);
        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutSensorResponse</returns>
        System.Threading.Tasks.Task<PutSensorResponse> PutSensorAsync (PutSensorRequest body, string sensorId);

        /// <summary>
        /// Update label for a sensor instance
        /// </summary>
        /// <remarks>
        /// Changes the label of an existing sensor instance to the new label specified.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutSensorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutSensorResponse>> PutSensorAsyncWithHttpInfo (PutSensorRequest body, string sensorId);
        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutStreamResponse</returns>
        System.Threading.Tasks.Task<PutStreamResponse> PutStreamAsync (PutStreamRequest body, string sensorId);

        /// <summary>
        /// Stream data to a sensor fusion vector
        /// </summary>
        /// <remarks>
        /// Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </remarks>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutStreamResponse>> PutStreamAsyncWithHttpInfo (PutStreamRequest body, string sensorId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private BoonAmber.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        //Boon Authorization and License Variables
        private string token;
        private ulong reauth_time;
        private bool verify;

        ///<Summary>
        /// Oauth2 Username
        ///</Summary>
        public string username { get; }
        ///<Summary>
        /// Oauth2 Password
        ///</Summary>
        public string password { get; }
        ///<Summary>
        /// API Server
        ///</Summary>
        public string server { get; }
        ///<Summary>
        /// Oauth2 Server
        ///</Summary>
        public string oauth_server { get; }

        private ulong TimeNow() {
            TimeSpan t = DateTime.UtcNow - new DateTime(1970, 1, 1);
            ulong secondsSinceEpoch = (ulong)t.TotalSeconds;
            return secondsSinceEpoch;
        }

        /// <summary>
        /// Formats data as CSV in order to call PostStream
        /// </summary>
        /// <param name="data">Array of floating point data</param>
        /// <returns>
        /// String of CSV Data
        /// </returns>
        public string FormatData(float[] data) {
            var data_str = String.Join(",", data);
            return data_str;
        }

        /// <summary>
        /// Authenticate client for the next hour using the credentials given at
        /// initialization. This acquires and stores an oauth2 token which remains
        /// valid for one hour and is used to authenticate all other API requests.
        /// </summary>
        /// <returns></returns>
        public void Authenticate(bool force = false) {
            if (!force && TimeNow() <= this.reauth_time ){
                return; //Not Yet
            }

            //Request body
            var body = new PostAuth2Request(this.username, this.password);

            // post oauth2
            var response = PostOauth2(body);

            // Get Token
            this.token = response.IdToken;
            if (string.IsNullOrEmpty(this.token)){
                throw new BoonAmber.Client.ApiException(401, "authentication failed: invalid credentials");
            }

            //Get expiration
            ulong expire_secs = 0;
            if (ulong.TryParse(response.ExpiresIn, out expire_secs)){
                this.reauth_time = TimeNow() + expire_secs - 60;
            }
            else {
                throw new BoonAmber.Client.ApiException(401, "authentication failed: invalid expiration time");
            }

            string full_authorization = "Bearer " + this.token;
            this.Configuration.ApiKey.Add("Authorization", this.token);

            //Console.WriteLine("Authenticate: token: {0} reauth_time: {1}", this.token, this.reauth_time);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="license_id">Unique identifier for license file</param>
        /// <param name="license_file">Amber license file path</param>
        /// <param name="verify">Whether or not to verify SSL Certs</param>
        /// <param name="timeout">Timeouts for API requests (milliseconds)</param>
        /// <returns></returns>
        public DefaultApi(string license_id = "default", string license_file = "~/.Amber.license", bool verify = true, int timeout = 300000)
        {

            this.token = null;
            this.reauth_time = 0;
            this.verify = verify;

            var user_agent = "Boon Logic / amber-csharp-sdk / requests";

            // first load from license file, override from environment if specified
            string license_path = Environment.GetEnvironmentVariable("AMBER_LICENSE_FILE");
            license_path = string.IsNullOrEmpty(license_path) ? license_file : license_path;

            // determine which license_id to use, override from environment if specified
            string license_identifier = Environment.GetEnvironmentVariable("AMBER_LICENSE_ID");
            license_identifier = string.IsNullOrEmpty(license_identifier) ? license_id : license_identifier;

            //empty
            this.username = "";
            this.password = "";
            this.server = "";
            this.oauth_server = "";

            // try to read license profile
            if (!string.IsNullOrEmpty(license_path)){

                //Parse Linux Home Path
                string home_path = license_path.Substring(0, 2);
                if(home_path == "~/"){
                    string file_path = license_path.Substring(2);
                    string full_home_path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                    license_path =  Path.Combine(full_home_path, file_path); 
                }

                var path = Directory.GetCurrentDirectory();
                // TODO: what is the wroking directory of these tests? test license file is not being found
                if (File.Exists(license_path)) {
                    //Read JSON File
                    var jsonString = File.ReadAllText(license_path);
                    dynamic json_input = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);

                    //Parse Specific Profile
                    var profile = json_input[license_identifier];
                    this.username = profile["username"];
                    this.password = profile["password"];
                    this.server = profile["server"];
                    this.oauth_server = profile["oauth-server"];
                }
            } 

            // override from environment if specified
            var temp_username = Environment.GetEnvironmentVariable("AMBER_USERNAME");
            this.username = string.IsNullOrEmpty(temp_username) ? this.username : temp_username;
            var temp_password = Environment.GetEnvironmentVariable("AMBER_PASSWORD");
            this.password = string.IsNullOrEmpty(temp_password) ? this.password : temp_password;
            var temp_server = Environment.GetEnvironmentVariable("AMBER_SERVER");
            this.server = string.IsNullOrEmpty(temp_server) ? this.server : temp_server;
            var temp_oauth_server = Environment.GetEnvironmentVariable("AMBER_OAUTH_SERVER");
            this.oauth_server = string.IsNullOrEmpty(temp_oauth_server) ? this.oauth_server : temp_oauth_server;

            //fallback oauth server to main server
            if (string.IsNullOrEmpty(this.oauth_server)){
                this.oauth_server = this.server;
            }

            string cert = Environment.GetEnvironmentVariable("AMBER_SSL_CERT");

            //check verify environment variable
            string verify_str = Environment.GetEnvironmentVariable("AMBER_SSL_VERIFY");
            if(!string.IsNullOrEmpty(verify_str)){
                bool temp_verify = false;
                if (bool.TryParse(verify_str, out temp_verify)){
                    this.verify = temp_verify;
                }
            }

            //Console.WriteLine("Amber: username: {0} password: {1} server: {2} oauth_server: {3} verify: {4}", this.username, this.password, this.server, this.oauth_server, this.verify);

            // verify required profile elements have been created
            if (this.username == "" ){
                throw new InvalidOperationException("username not specified");
            }
            if (this.password == "" ){
                throw new InvalidOperationException("password not specified");
            }
            if (this.server == "" ){
                throw new InvalidOperationException("server not specified");
            }

            //Set the configuration (Create API will be called the first time this.Configuration.ApiClient is used)
            this.Configuration = new BoonAmber.Client.Configuration { BasePath = this.server, Timeout = timeout, UserAgent = user_agent, Verify = this.verify };
            this.OauthConfiguration = new BoonAmber.Client.Configuration
                { BasePath = this.oauth_server, Timeout = timeout, UserAgent = user_agent, Verify = this.verify };
            this.Configuration.DefaultHeader.Add("Content-Type", "application/json");
            this.OauthConfiguration.DefaultHeader.Add("Content-Type", "application/json");

            this.ExceptionFactory = BoonAmber.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BoonAmber.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Sets the oauth server configuration (could be the same as the configuration but might be different)
        /// </summary>
        /// <returns></returns>
        public BoonAmber.Client.Configuration OauthConfiguration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BoonAmber.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Error</returns>
        public Error DeleteSensor (string sensorId)
        {
             ApiResponse<Error> localVarResponse = DeleteSensorWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of Error</returns>
        public ApiResponse< Error > DeleteSensorWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->DeleteSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Error>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Error) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Error)));
        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> DeleteSensorAsync (string sensorId)
        {
             ApiResponse<Error> localVarResponse = await DeleteSensorAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a sensor instance Deletes the sensor instance with the specified sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Error>> DeleteSensorAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->DeleteSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Error>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Error) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Error)));
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetSummaryResponse</returns>
        public GetSummaryResponse GetAmberSummary (string sensorId)
        {
             ApiResponse<GetSummaryResponse> localVarResponse = GetAmberSummaryWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetSummaryResponse</returns>
        public ApiResponse< GetSummaryResponse > GetAmberSummaryWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetAmberSummary");

            var localVarPath = "/__summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAmberSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSummaryResponse)));
        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetSummaryResponse</returns>
        public async System.Threading.Tasks.Task<GetSummaryResponse> GetAmberSummaryAsync (string sensorId)
        {
             ApiResponse<GetSummaryResponse> localVarResponse = await GetAmberSummaryAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the JSON block of the amber image Returns the json block of the amber sensor
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSummaryResponse>> GetAmberSummaryAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetAmberSummary");

            var localVarPath = "/__summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAmberSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSummaryResponse)));
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetConfigResponse</returns>
        public GetConfigResponse GetConfig (string sensorId)
        {
             ApiResponse<GetConfigResponse> localVarResponse = GetConfigWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetConfigResponse</returns>
        public ApiResponse< GetConfigResponse > GetConfigWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetConfigResponse)));
        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetConfigResponse</returns>
        public async System.Threading.Tasks.Task<GetConfigResponse> GetConfigAsync (string sensorId)
        {
             ApiResponse<GetConfigResponse> localVarResponse = await GetConfigAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current configuration of a sensor instance Returns the current configuration of the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetConfigResponse>> GetConfigAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetConfigResponse)));
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetPretrainResponse</returns>
        public GetPretrainResponse GetPretrain (string sensorId)
        {
             ApiResponse<GetPretrainResponse> localVarResponse = GetPretrainWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetPretrainResponse</returns>
        public ApiResponse< GetPretrainResponse > GetPretrainWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetPretrain");

            var localVarPath = "/pretrain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPretrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPretrainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPretrainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPretrainResponse)));
        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetPretrainResponse</returns>
        public async System.Threading.Tasks.Task<GetPretrainResponse> GetPretrainAsync (string sensorId)
        {
             ApiResponse<GetPretrainResponse> localVarResponse = await GetPretrainAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status of pretrain operation Get status of a sensor which is currently pretraining.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetPretrainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPretrainResponse>> GetPretrainAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetPretrain");

            var localVarPath = "/pretrain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPretrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPretrainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPretrainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPretrainResponse)));
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>GetRootCauseResponse</returns>
        public GetRootCauseResponse GetRootCause (string sensorId, string clusterID = null, string pattern = null)
        {
             ApiResponse<GetRootCauseResponse> localVarResponse = GetRootCauseWithHttpInfo(sensorId, clusterID, pattern);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>ApiResponse of GetRootCauseResponse</returns>
        public ApiResponse< GetRootCauseResponse > GetRootCauseWithHttpInfo (string sensorId, string clusterID = null, string pattern = null)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetRootCause");

            var localVarPath = "/rootCause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterID", clusterID)); // query parameter
            if (pattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pattern", pattern)); // query parameter
            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootCause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRootCauseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRootCauseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRootCauseResponse)));
        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>Task of GetRootCauseResponse</returns>
        public async System.Threading.Tasks.Task<GetRootCauseResponse> GetRootCauseAsync (string sensorId, string clusterID = null, string pattern = null)
        {
             ApiResponse<GetRootCauseResponse> localVarResponse = await GetRootCauseAsyncWithHttpInfo(sensorId, clusterID, pattern);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get root cause analysis information from a sensor Returns analytic information on the root cause for the clusters provided.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="clusterID">An array of cluster IDs (optional)</param>
        /// <param name="pattern">Patterns to compare to the nano model for the root cause analysis (optional)</param>
        /// <returns>Task of ApiResponse (GetRootCauseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRootCauseResponse>> GetRootCauseAsyncWithHttpInfo (string sensorId, string clusterID = null, string pattern = null)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetRootCause");

            var localVarPath = "/rootCause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterID", clusterID)); // query parameter
            if (pattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pattern", pattern)); // query parameter
            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootCause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRootCauseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRootCauseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRootCauseResponse)));
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetSensorResponse</returns>
        public GetSensorResponse GetSensor (string sensorId)
        {
             ApiResponse<GetSensorResponse> localVarResponse = GetSensorWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetSensorResponse</returns>
        public ApiResponse< GetSensorResponse > GetSensorWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSensorResponse)));
        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetSensorResponse</returns>
        public async System.Threading.Tasks.Task<GetSensorResponse> GetSensorAsync (string sensorId)
        {
             ApiResponse<GetSensorResponse> localVarResponse = await GetSensorAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get basic information about a sensor instance Returns basic information about an existing sensor instance.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetSensorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSensorResponse>> GetSensorAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSensorResponse)));
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSensorsResponse</returns>
        public GetSensorsResponse GetSensors ()
        {
             ApiResponse<GetSensorsResponse> localVarResponse = GetSensorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSensorsResponse</returns>
        public ApiResponse< GetSensorsResponse > GetSensorsWithHttpInfo ()
        {

            var localVarPath = "/sensors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSensors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSensorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSensorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSensorsResponse)));
        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSensorsResponse</returns>
        public async System.Threading.Tasks.Task<GetSensorsResponse> GetSensorsAsync ()
        {
             ApiResponse<GetSensorsResponse> localVarResponse = await GetSensorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all sensors for this user Returns a list of all current sensor instances for this user.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSensorsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSensorsResponse>> GetSensorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/sensors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSensors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSensorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSensorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSensorsResponse)));
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>GetStatusResponse</returns>
        public GetStatusResponse GetStatus (string sensorId)
        {
             ApiResponse<GetStatusResponse> localVarResponse = GetStatusWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of GetStatusResponse</returns>
        public ApiResponse< GetStatusResponse > GetStatusWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetStatus");

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStatusResponse)));
        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of GetStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync (string sensorId)
        {
             ApiResponse<GetStatusResponse> localVarResponse = await GetStatusAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get analytic information from a sensor Returns analytic information derived from data processed by a sensor thus far.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (GetStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStatusResponse>> GetStatusAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->GetStatus");

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStatusResponse)));
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        public BoonAmber.Model.Version GetVersion ()
        {
             ApiResponse<BoonAmber.Model.Version> localVarResponse = GetVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        public ApiResponse< BoonAmber.Model.Version > GetVersionWithHttpInfo ()
        {

            var localVarPath = "/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoonAmber.Model.Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoonAmber.Model.Version) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoonAmber.Model.Version)));
        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        public async System.Threading.Tasks.Task<BoonAmber.Model.Version> GetVersionAsync ()
        {
             ApiResponse<BoonAmber.Model.Version> localVarResponse = await GetVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves API version information 
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoonAmber.Model.Version>> GetVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoonAmber.Model.Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoonAmber.Model.Version) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoonAmber.Model.Version)));
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostConfigResponse</returns>
        public PostConfigResponse PostConfig (PostConfigRequest body, string sensorId)
        {
             ApiResponse<PostConfigResponse> localVarResponse = PostConfigWithHttpInfo(body, sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostConfigResponse</returns>
        public ApiResponse< PostConfigResponse > PostConfigWithHttpInfo (PostConfigRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostConfig");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostConfigResponse)));
        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostConfigResponse</returns>
        public async System.Threading.Tasks.Task<PostConfigResponse> PostConfigAsync (PostConfigRequest body, string sensorId)
        {
             ApiResponse<PostConfigResponse> localVarResponse = await PostConfigAsyncWithHttpInfo(body, sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply configuration to a sensor instance Applies the provided configuration to the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Sensor configuration to be applied</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostConfigResponse>> PostConfigAsyncWithHttpInfo (PostConfigRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostConfig");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostConfigResponse)));
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>PostAuth2Response</returns>
        public PostAuth2Response PostOauth2 (PostAuth2Request body)
        {
             ApiResponse<PostAuth2Response> localVarResponse = PostOauth2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>ApiResponse of PostAuth2Response</returns>
        public ApiResponse< PostAuth2Response > PostOauth2WithHttpInfo (PostAuth2Request body)
        {

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostOauth2");

            var localVarPath = "/oauth2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.OauthConfiguration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.OauthConfiguration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.OauthConfiguration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.OauthConfiguration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.OauthConfiguration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOauth2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAuth2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostAuth2Response) this.OauthConfiguration.ApiClient.Deserialize(localVarResponse, typeof(PostAuth2Response)));
        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>Task of PostAuth2Response</returns>
        public async System.Threading.Tasks.Task<PostAuth2Response> PostOauth2Async (PostAuth2Request body)
        {
             ApiResponse<PostAuth2Response> localVarResponse = await PostOauth2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a bearer token using Amber account credentials Requests a bearer token using Amber account credentials. The requested bearer token is returned as the \&quot;id-token\&quot; response attribute. This token is to be used for authenticating API requests throughout a usage session and expires after 60 minutes.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Account credentials to be used for authentication</param>
        /// <returns>Task of ApiResponse (PostAuth2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostAuth2Response>> PostOauth2AsyncWithHttpInfo (PostAuth2Request body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostOauth2");

            var localVarPath = "/oauth2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOauth2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAuth2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostAuth2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostAuth2Response)));
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostOutageResponse</returns>
        public PostOutageResponse PostOutage (string sensorId)
        {
             ApiResponse<PostOutageResponse> localVarResponse = PostOutageWithHttpInfo(sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostOutageResponse</returns>
        public ApiResponse< PostOutageResponse > PostOutageWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostOutage");

            var localVarPath = "/outage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOutage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostOutageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostOutageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostOutageResponse)));
        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostOutageResponse</returns>
        public async System.Threading.Tasks.Task<PostOutageResponse> PostOutageAsync (string sensorId)
        {
             ApiResponse<PostOutageResponse> localVarResponse = await PostOutageAsyncWithHttpInfo(sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informs the server of an outage Clears the load buffer of streaming window and resets statistics. Returns stream status
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostOutageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostOutageResponse>> PostOutageAsyncWithHttpInfo (string sensorId)
        {
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostOutage");

            var localVarPath = "/outage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOutage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostOutageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostOutageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostOutageResponse)));
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>PostPretrainResponse</returns>
        public PostPretrainResponse PostPretrain (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null)
        {
             ApiResponse<PostPretrainResponse> localVarResponse = PostPretrainWithHttpInfo(body, sensorId, amberChunk, amberTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>ApiResponse of PostPretrainResponse</returns>
        public ApiResponse< PostPretrainResponse > PostPretrainWithHttpInfo (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostPretrain");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostPretrain");

            var localVarPath = "/pretrain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (amberChunk != null) localVarHeaderParams.Add("amberChunk", this.Configuration.ApiClient.ParameterToString(amberChunk)); // header parameter
            if (amberTransaction != null) localVarHeaderParams.Add("amberTransaction", this.Configuration.ApiClient.ParameterToString(amberTransaction)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPretrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostPretrainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostPretrainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostPretrainResponse)));
        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>Task of PostPretrainResponse</returns>
        public async System.Threading.Tasks.Task<PostPretrainResponse> PostPretrainAsync (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null)
        {
             ApiResponse<PostPretrainResponse> localVarResponse = await PostPretrainAsyncWithHttpInfo(body, sensorId, amberChunk, amberTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pretrain a sensor using historical data Pretrains a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <param name="amberChunk">Specification of chunk, 1:3 2:3 3:3 for example (optional)</param>
        /// <param name="amberTransaction">Unique identifier for chunk transactions (optional)</param>
        /// <returns>Task of ApiResponse (PostPretrainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostPretrainResponse>> PostPretrainAsyncWithHttpInfo (PostPretrainRequest body, string sensorId, string amberChunk = null, string amberTransaction = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostPretrain");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostPretrain");

            var localVarPath = "/pretrain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (amberChunk != null) localVarHeaderParams.Add("amberChunk", this.Configuration.ApiClient.ParameterToString(amberChunk)); // header parameter
            if (amberTransaction != null) localVarHeaderParams.Add("amberTransaction", this.Configuration.ApiClient.ParameterToString(amberTransaction)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPretrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostPretrainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostPretrainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostPretrainResponse)));
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>PostSensorResponse</returns>
        public PostSensorResponse PostSensor (PostSensorRequest body)
        {
             ApiResponse<PostSensorResponse> localVarResponse = PostSensorWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>ApiResponse of PostSensorResponse</returns>
        public ApiResponse< PostSensorResponse > PostSensorWithHttpInfo (PostSensorRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSensorResponse)));
        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>Task of PostSensorResponse</returns>
        public async System.Threading.Tasks.Task<PostSensorResponse> PostSensorAsync (PostSensorRequest body)
        {
             ApiResponse<PostSensorResponse> localVarResponse = await PostSensorAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new a sensor instance Spawns a new sensor instance, returning its unique sensorId.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Label for new sensor instance to be created</param>
        /// <returns>Task of ApiResponse (PostSensorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostSensorResponse>> PostSensorAsyncWithHttpInfo (PostSensorRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSensorResponse)));
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PostStreamResponse</returns>
        public PostStreamResponse PostStream (PostStreamRequest body, string sensorId)
        {
             ApiResponse<PostStreamResponse> localVarResponse = PostStreamWithHttpInfo(body, sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PostStreamResponse</returns>
        public ApiResponse< PostStreamResponse > PostStreamWithHttpInfo (PostStreamRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostStream");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostStream");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStreamResponse)));
        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PostStreamResponse</returns>
        public async System.Threading.Tasks.Task<PostStreamResponse> PostStreamAsync (PostStreamRequest body, string sensorId)
        {
             ApiResponse<PostStreamResponse> localVarResponse = await PostStreamAsyncWithHttpInfo(body, sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stream data to a sensor Sends data to a sensor. Ingoing data should be formatted as a simple string of comma-separated numbers with no spaces.  The following analytic results are returned: - state : sensor state as of this call (one of: \&quot;Buffering\&quot;, \&quot;Autotuning\&quot;, \&quot;Learning\&quot;, \&quot;Monitoring\&quot;, \&quot;Error\&quot;) - ID : array of cluster IDs. These correspond one-to-one with input samples, indicating the cluster to which each input pattern was assigned. - SI : array of smoothed anomaly index values. These values correspond one-to-one with the input samples and range between 0 and 1000. Values closer to 0 represent input patterns which are ordinary given the data seen so far on this sensor. Values closer to 1000 represent novel patterns which are anomalous with respect to data seen before. - AD : array of 0&#x27;s and 1&#x27;s as anomaly detection indicators. These correspond one-to-one with input samples and are produced by thresholding the smoothed anomaly index (SI). The threshold is determined automatically from the SI values. A value of 0 indicates that the SI has not exceeded the anomaly detection threshold. A value of 1 indicates it has, signaling an anomaly at the corresponding input sample. - AH : array of anomaly history values. These values are a moving-window sum of the AD, giving the number of anomaly detections (1&#x27;s) present in the AD signal over a \&quot;recent history\&quot; window whose length is the buffer size. - AM : array of Amber Metric values. These are floating-point values between 0.0 and 1.0 indicating the extent to which the AH contains an unusually high number of anomalies in recent history. The values are derived statistically from a Poisson model, with values close to 0.0 signaling a lower, and values close to 1.0 signaling a higher, frequency of anomalies than usual. - AW : array of Amber Warning Level values. This index is produced by thresholding the Amber Metric (AM) and takes on the values 0, 1 or 2 representing a discrete \&quot;warning level\&quot; for an asset based on the frequency of anomalies within recent history. 0 &#x3D; normal, 1 &#x3D; asset changing, 2 &#x3D; asset critical. The default thresholds for the two warning levels are the standard statistical values of 0.95 (outlier, asset chaing) and 0.997 (extreme outlier, asset critical).
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data to be streamed to sensor. Should be formatted as a simple string of comma-separated numbers with no spaces (e.g. &quot;0,0.5,1,1.5,2&quot;).</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PostStreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostStreamResponse>> PostStreamAsyncWithHttpInfo (PostStreamRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostStream");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PostStream");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStreamResponse)));
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutConfigResponse</returns>
        public PutConfigResponse PutConfig (PutConfigRequest body, string sensorId)
        {
             ApiResponse<PutConfigResponse> localVarResponse = PutConfigWithHttpInfo(body, sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutConfigResponse</returns>
        public ApiResponse< PutConfigResponse > PutConfigWithHttpInfo (PutConfigRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutConfig");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutConfigResponse)));
        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutConfigResponse</returns>
        public async System.Threading.Tasks.Task<PutConfigResponse> PutConfigAsync (PutConfigRequest body, string sensorId)
        {
             ApiResponse<PutConfigResponse> localVarResponse = await PutConfigAsyncWithHttpInfo(body, sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update configuration for a sensor instance Updates the configuration for the sensor instance specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates to sensor configuration</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutConfigResponse>> PutConfigAsyncWithHttpInfo (PutConfigRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutConfig");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutConfig");

            var localVarPath = "/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutConfigResponse)));
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutSensorResponse</returns>
        public PutSensorResponse PutSensor (PutSensorRequest body, string sensorId)
        {
             ApiResponse<PutSensorResponse> localVarResponse = PutSensorWithHttpInfo(body, sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutSensorResponse</returns>
        public ApiResponse< PutSensorResponse > PutSensorWithHttpInfo (PutSensorRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutSensor");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutSensorResponse)));
        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutSensorResponse</returns>
        public async System.Threading.Tasks.Task<PutSensorResponse> PutSensorAsync (PutSensorRequest body, string sensorId)
        {
             ApiResponse<PutSensorResponse> localVarResponse = await PutSensorAsyncWithHttpInfo(body, sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update label for a sensor instance Changes the label of an existing sensor instance to the new label specified.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New label to apply to sensor instance</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutSensorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutSensorResponse>> PutSensorAsyncWithHttpInfo (PutSensorRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutSensor");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutSensor");

            var localVarPath = "/sensor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSensor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutSensorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutSensorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutSensorResponse)));
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>PutStreamResponse</returns>
        public PutStreamResponse PutStream (PutStreamRequest body, string sensorId)
        {
             ApiResponse<PutStreamResponse> localVarResponse = PutStreamWithHttpInfo(body, sensorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>ApiResponse of PutStreamResponse</returns>
        public ApiResponse< PutStreamResponse > PutStreamWithHttpInfo (PutStreamRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutStream");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutStream");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutStreamResponse)));
        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of PutStreamResponse</returns>
        public async System.Threading.Tasks.Task<PutStreamResponse> PutStreamAsync (PutStreamRequest body, string sensorId)
        {
             ApiResponse<PutStreamResponse> localVarResponse = await PutStreamAsyncWithHttpInfo(body, sensorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stream data to a sensor fusion vector Update fusion vector with new values for the given features, and optionally submit to Amber. Analytic results returned are the same as POST /stream.
        /// </summary>
        /// <exception cref="BoonAmber.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New values for sensor fusion vector.</param>
        /// <param name="sensorId">Unique identifier for sensor</param>
        /// <returns>Task of ApiResponse (PutStreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutStreamResponse>> PutStreamAsyncWithHttpInfo (PutStreamRequest body, string sensorId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutStream");
            // verify the required parameter 'sensorId' is set
            if (sensorId == null)
                throw new ApiException(400, "Missing required parameter 'sensorId' when calling DefaultApi->PutStream");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorId != null) localVarHeaderParams.Add("sensorId", this.Configuration.ApiClient.ParameterToString(sensorId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authorize-amber-pool) required
            this.Authenticate();
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PutStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutStreamResponse)));
        }

    }
}
