/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// GetStatusResponse
    /// </summary>
    [DataContract(Name = "getStatusResponse")]
    public partial class GetStatusResponse : IEquatable<GetStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetStatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStatusResponse" /> class.
        /// </summary>
        /// <param name="pca">pca (required).</param>
        /// <param name="clusterGrowth">clusterGrowth (required).</param>
        /// <param name="clusterSizes">clusterSizes (required).</param>
        /// <param name="anomalyIndexes">anomalyIndexes (required).</param>
        /// <param name="frequencyIndexes">frequencyIndexes (required).</param>
        /// <param name="distanceIndexes">distanceIndexes (required).</param>
        /// <param name="totalInferences">inferences since the most recent restart (required).</param>
        /// <param name="numClusters">numClusters (required).</param>
        /// <param name="anomalyThreshold">anomalyThreshold (required).</param>
        /// <param name="state">state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring (required).</param>
        public GetStatusResponse(PCA pca = default(PCA), Uint64Array clusterGrowth = default(Uint64Array), Uint64Array clusterSizes = default(Uint64Array), Uint16Array anomalyIndexes = default(Uint16Array), Uint16Array frequencyIndexes = default(Uint16Array), Uint16Array distanceIndexes = default(Uint16Array), int totalInferences = default(int), int numClusters = default(int), int anomalyThreshold = default(int), string state = default(string))
        {
            // to ensure "pca" is required (not null)
            if (pca == null)
            {
                throw new ArgumentNullException("pca is a required property for GetStatusResponse and cannot be null");
            }
            this.Pca = pca;
            // to ensure "clusterGrowth" is required (not null)
            if (clusterGrowth == null)
            {
                throw new ArgumentNullException("clusterGrowth is a required property for GetStatusResponse and cannot be null");
            }
            this.ClusterGrowth = clusterGrowth;
            // to ensure "clusterSizes" is required (not null)
            if (clusterSizes == null)
            {
                throw new ArgumentNullException("clusterSizes is a required property for GetStatusResponse and cannot be null");
            }
            this.ClusterSizes = clusterSizes;
            // to ensure "anomalyIndexes" is required (not null)
            if (anomalyIndexes == null)
            {
                throw new ArgumentNullException("anomalyIndexes is a required property for GetStatusResponse and cannot be null");
            }
            this.AnomalyIndexes = anomalyIndexes;
            // to ensure "frequencyIndexes" is required (not null)
            if (frequencyIndexes == null)
            {
                throw new ArgumentNullException("frequencyIndexes is a required property for GetStatusResponse and cannot be null");
            }
            this.FrequencyIndexes = frequencyIndexes;
            // to ensure "distanceIndexes" is required (not null)
            if (distanceIndexes == null)
            {
                throw new ArgumentNullException("distanceIndexes is a required property for GetStatusResponse and cannot be null");
            }
            this.DistanceIndexes = distanceIndexes;
            this.TotalInferences = totalInferences;
            this.NumClusters = numClusters;
            this.AnomalyThreshold = anomalyThreshold;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for GetStatusResponse and cannot be null");
            }
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets Pca
        /// </summary>
        [DataMember(Name = "pca", IsRequired = true, EmitDefaultValue = false)]
        public PCA Pca { get; set; }

        /// <summary>
        /// Gets or Sets ClusterGrowth
        /// </summary>
        [DataMember(Name = "clusterGrowth", IsRequired = true, EmitDefaultValue = false)]
        public Uint64Array ClusterGrowth { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSizes
        /// </summary>
        [DataMember(Name = "clusterSizes", IsRequired = true, EmitDefaultValue = false)]
        public Uint64Array ClusterSizes { get; set; }

        /// <summary>
        /// Gets or Sets AnomalyIndexes
        /// </summary>
        [DataMember(Name = "anomalyIndexes", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array AnomalyIndexes { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyIndexes
        /// </summary>
        [DataMember(Name = "frequencyIndexes", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array FrequencyIndexes { get; set; }

        /// <summary>
        /// Gets or Sets DistanceIndexes
        /// </summary>
        [DataMember(Name = "distanceIndexes", IsRequired = true, EmitDefaultValue = false)]
        public Uint16Array DistanceIndexes { get; set; }

        /// <summary>
        /// inferences since the most recent restart
        /// </summary>
        /// <value>inferences since the most recent restart</value>
        [DataMember(Name = "totalInferences", IsRequired = true, EmitDefaultValue = false)]
        public int TotalInferences { get; set; }

        /// <summary>
        /// Gets or Sets NumClusters
        /// </summary>
        [DataMember(Name = "numClusters", IsRequired = true, EmitDefaultValue = false)]
        public int NumClusters { get; set; }

        /// <summary>
        /// Gets or Sets AnomalyThreshold
        /// </summary>
        [DataMember(Name = "anomalyThreshold", IsRequired = true, EmitDefaultValue = false)]
        public int AnomalyThreshold { get; set; }

        /// <summary>
        /// state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring
        /// </summary>
        /// <value>state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetStatusResponse {\n");
            sb.Append("  Pca: ").Append(Pca).Append("\n");
            sb.Append("  ClusterGrowth: ").Append(ClusterGrowth).Append("\n");
            sb.Append("  ClusterSizes: ").Append(ClusterSizes).Append("\n");
            sb.Append("  AnomalyIndexes: ").Append(AnomalyIndexes).Append("\n");
            sb.Append("  FrequencyIndexes: ").Append(FrequencyIndexes).Append("\n");
            sb.Append("  DistanceIndexes: ").Append(DistanceIndexes).Append("\n");
            sb.Append("  TotalInferences: ").Append(TotalInferences).Append("\n");
            sb.Append("  NumClusters: ").Append(NumClusters).Append("\n");
            sb.Append("  AnomalyThreshold: ").Append(AnomalyThreshold).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStatusResponse);
        }

        /// <summary>
        /// Returns true if GetStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pca == input.Pca ||
                    (this.Pca != null &&
                    this.Pca.Equals(input.Pca))
                ) && 
                (
                    this.ClusterGrowth == input.ClusterGrowth ||
                    (this.ClusterGrowth != null &&
                    this.ClusterGrowth.Equals(input.ClusterGrowth))
                ) && 
                (
                    this.ClusterSizes == input.ClusterSizes ||
                    (this.ClusterSizes != null &&
                    this.ClusterSizes.Equals(input.ClusterSizes))
                ) && 
                (
                    this.AnomalyIndexes == input.AnomalyIndexes ||
                    (this.AnomalyIndexes != null &&
                    this.AnomalyIndexes.Equals(input.AnomalyIndexes))
                ) && 
                (
                    this.FrequencyIndexes == input.FrequencyIndexes ||
                    (this.FrequencyIndexes != null &&
                    this.FrequencyIndexes.Equals(input.FrequencyIndexes))
                ) && 
                (
                    this.DistanceIndexes == input.DistanceIndexes ||
                    (this.DistanceIndexes != null &&
                    this.DistanceIndexes.Equals(input.DistanceIndexes))
                ) && 
                (
                    this.TotalInferences == input.TotalInferences ||
                    this.TotalInferences.Equals(input.TotalInferences)
                ) && 
                (
                    this.NumClusters == input.NumClusters ||
                    this.NumClusters.Equals(input.NumClusters)
                ) && 
                (
                    this.AnomalyThreshold == input.AnomalyThreshold ||
                    this.AnomalyThreshold.Equals(input.AnomalyThreshold)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pca != null)
                {
                    hashCode = (hashCode * 59) + this.Pca.GetHashCode();
                }
                if (this.ClusterGrowth != null)
                {
                    hashCode = (hashCode * 59) + this.ClusterGrowth.GetHashCode();
                }
                if (this.ClusterSizes != null)
                {
                    hashCode = (hashCode * 59) + this.ClusterSizes.GetHashCode();
                }
                if (this.AnomalyIndexes != null)
                {
                    hashCode = (hashCode * 59) + this.AnomalyIndexes.GetHashCode();
                }
                if (this.FrequencyIndexes != null)
                {
                    hashCode = (hashCode * 59) + this.FrequencyIndexes.GetHashCode();
                }
                if (this.DistanceIndexes != null)
                {
                    hashCode = (hashCode * 59) + this.DistanceIndexes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalInferences.GetHashCode();
                hashCode = (hashCode * 59) + this.NumClusters.GetHashCode();
                hashCode = (hashCode * 59) + this.AnomalyThreshold.GetHashCode();
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
