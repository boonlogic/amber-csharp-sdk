/*
 * Amber API Server
 *
 * Boon Logic Amber API Server
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BoonAmber.Client.OpenAPIDateConverter;

namespace BoonAmber.Model
{
    /// <summary>
    /// MStreamingParameters
    /// </summary>
    [DataContract(Name = "m_StreamingParameters")]
    public partial class MStreamingParameters : IEquatable<MStreamingParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MStreamingParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MStreamingParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MStreamingParameters" /> class.
        /// </summary>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="mEnableAutotuning">mEnableAutotuning.</param>
        /// <param name="mSamplesToBufferForAutotuning">mSamplesToBufferForAutotuning (required).</param>
        /// <param name="mGraduationAtRateNumerator">mGraduationAtRateNumerator (required).</param>
        /// <param name="mGraduationAtRateDenominator">mGraduationAtRateDenominator (required).</param>
        /// <param name="mGraduateAtMaxClusters">mGraduateAtMaxClusters (required).</param>
        /// <param name="mGraduateAtMaxSamples">mGraduateAtMaxSamples (required).</param>
        public MStreamingParameters(int versionNumber = default(int), bool mEnableAutotuning = default(bool), int mSamplesToBufferForAutotuning = default(int), int mGraduationAtRateNumerator = default(int), int mGraduationAtRateDenominator = default(int), int mGraduateAtMaxClusters = default(int), int mGraduateAtMaxSamples = default(int))
        {
            this.MSamplesToBufferForAutotuning = mSamplesToBufferForAutotuning;
            this.MGraduationAtRateNumerator = mGraduationAtRateNumerator;
            this.MGraduationAtRateDenominator = mGraduationAtRateDenominator;
            this.MGraduateAtMaxClusters = mGraduateAtMaxClusters;
            this.MGraduateAtMaxSamples = mGraduateAtMaxSamples;
            this.VersionNumber = versionNumber;
            this.MEnableAutotuning = mEnableAutotuning;
        }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "VersionNumber", EmitDefaultValue = false)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets MEnableAutotuning
        /// </summary>
        [DataMember(Name = "m_EnableAutotuning", EmitDefaultValue = true)]
        public bool MEnableAutotuning { get; set; }

        /// <summary>
        /// Gets or Sets MSamplesToBufferForAutotuning
        /// </summary>
        [DataMember(Name = "m_SamplesToBufferForAutotuning", IsRequired = true, EmitDefaultValue = false)]
        public int MSamplesToBufferForAutotuning { get; set; }

        /// <summary>
        /// Gets or Sets MGraduationAtRateNumerator
        /// </summary>
        [DataMember(Name = "m_GraduationAtRateNumerator", IsRequired = true, EmitDefaultValue = false)]
        public int MGraduationAtRateNumerator { get; set; }

        /// <summary>
        /// Gets or Sets MGraduationAtRateDenominator
        /// </summary>
        [DataMember(Name = "m_GraduationAtRateDenominator", IsRequired = true, EmitDefaultValue = false)]
        public int MGraduationAtRateDenominator { get; set; }

        /// <summary>
        /// Gets or Sets MGraduateAtMaxClusters
        /// </summary>
        [DataMember(Name = "m_GraduateAtMaxClusters", IsRequired = true, EmitDefaultValue = false)]
        public int MGraduateAtMaxClusters { get; set; }

        /// <summary>
        /// Gets or Sets MGraduateAtMaxSamples
        /// </summary>
        [DataMember(Name = "m_GraduateAtMaxSamples", IsRequired = true, EmitDefaultValue = false)]
        public int MGraduateAtMaxSamples { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MStreamingParameters {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  MEnableAutotuning: ").Append(MEnableAutotuning).Append("\n");
            sb.Append("  MSamplesToBufferForAutotuning: ").Append(MSamplesToBufferForAutotuning).Append("\n");
            sb.Append("  MGraduationAtRateNumerator: ").Append(MGraduationAtRateNumerator).Append("\n");
            sb.Append("  MGraduationAtRateDenominator: ").Append(MGraduationAtRateDenominator).Append("\n");
            sb.Append("  MGraduateAtMaxClusters: ").Append(MGraduateAtMaxClusters).Append("\n");
            sb.Append("  MGraduateAtMaxSamples: ").Append(MGraduateAtMaxSamples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MStreamingParameters);
        }

        /// <summary>
        /// Returns true if MStreamingParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of MStreamingParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MStreamingParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VersionNumber == input.VersionNumber ||
                    this.VersionNumber.Equals(input.VersionNumber)
                ) && 
                (
                    this.MEnableAutotuning == input.MEnableAutotuning ||
                    this.MEnableAutotuning.Equals(input.MEnableAutotuning)
                ) && 
                (
                    this.MSamplesToBufferForAutotuning == input.MSamplesToBufferForAutotuning ||
                    this.MSamplesToBufferForAutotuning.Equals(input.MSamplesToBufferForAutotuning)
                ) && 
                (
                    this.MGraduationAtRateNumerator == input.MGraduationAtRateNumerator ||
                    this.MGraduationAtRateNumerator.Equals(input.MGraduationAtRateNumerator)
                ) && 
                (
                    this.MGraduationAtRateDenominator == input.MGraduationAtRateDenominator ||
                    this.MGraduationAtRateDenominator.Equals(input.MGraduationAtRateDenominator)
                ) && 
                (
                    this.MGraduateAtMaxClusters == input.MGraduateAtMaxClusters ||
                    this.MGraduateAtMaxClusters.Equals(input.MGraduateAtMaxClusters)
                ) && 
                (
                    this.MGraduateAtMaxSamples == input.MGraduateAtMaxSamples ||
                    this.MGraduateAtMaxSamples.Equals(input.MGraduateAtMaxSamples)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VersionNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.MEnableAutotuning.GetHashCode();
                hashCode = (hashCode * 59) + this.MSamplesToBufferForAutotuning.GetHashCode();
                hashCode = (hashCode * 59) + this.MGraduationAtRateNumerator.GetHashCode();
                hashCode = (hashCode * 59) + this.MGraduationAtRateDenominator.GetHashCode();
                hashCode = (hashCode * 59) + this.MGraduateAtMaxClusters.GetHashCode();
                hashCode = (hashCode * 59) + this.MGraduateAtMaxSamples.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
